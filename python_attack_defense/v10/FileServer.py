# -*- coding: utf-8 -*-
# @Time    : 2022/12/4
# @Author  : SecCodeCat

# File Server
import re
import socketserver
from optparse import OptionParser
import socketserver
import json
import os
import sys
import struct


def sendFile(conn, head_info, head_info_len, filename):
    try:
        conn.send(head_info_len)
        conn.send(head_info.encode("utf-8"))
        with open(filename, 'rb') as f:
            conn.sendall(f.read())
        print(f"[+] send success! {filename}")
    except:
        print(f"[-] send fail! {filename}")


def operatefile(filename):
    filesize_bytes = os.path.getsize(filename)
    pattern = re.compile(r'([^<>/\\\|:""\*\?]+\.\w+$)')
    data = pattern.findall(filename)
    head_dir = {
        'filename': data,
        'filesize_bytes': filesize_bytes,
    }
    head_info = json.dumps(head_dir)
    head_info_len = struct.pack('i', len(head_info))
    return head_info_len, head_info


class MySserver(socketserver.BaseRequestHandler):
    buffsize = 1024

    def handle(self):
        print(f'[+] remote client ip: {self.client_address[0]}')
        while True:
            filename = input('please send file name >>>').strip()
            if filename == "exit":
                break
            head_info_len, head_info = operatefile(filename)
            sendFile(self.request, head_info, head_info_len, filename)
        self.request.close()


def main():
    parser = OptionParser("Usage:%prog -p <port>")
    parser.add_option('-p', type='string', dest='port', help='specify target port')
    options, args = parser.parse_args()
    port = int(options.port)
    print(f"[+] listening at {port}")
    # 高级别的网络服务模块 SocketServer， 提供了服务器中心类，可以简化网络服务器的开发。
    # socket不支持多并发，socketserver是对socket的再封装，简化网络服务器版的开发。
    s = socketserver.ThreadingTCPServer(('0.0.0.0', port), MySserver)
    s.serve_forever()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("[E] Interrupted by user ...")
