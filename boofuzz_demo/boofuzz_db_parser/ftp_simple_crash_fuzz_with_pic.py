#!/usr/bin/env python3
"""Demo FTP fuzzer as a standalone script."""
import sys
import time
import traceback

from boofuzz import *


# can crashed winxp_sp3 freefloat ftp server 1.0 crash, use it to learn boofuzz api, because the vuln is simple.

def main(ip, port):
    """
    This example is a very simple FTP fuzzer. It uses no process monitory
    (procmon) and assumes that the FTP server is already running.
    """

    try:
        # ref: https://blog.csdn.net/weixin_46222091/article/details/119334375   4.1
        session = Session(target=Target(connection=TCPSocketConnection(ip, port)),
                          sleep_time=0.1,
                          restart_sleep_time=1,  # sleep for wait after crash, just 1
                          post_test_case_callbacks=[handle_ret],
                          restart_threshold=7,
                          # web_port=6666,   # default 26000
                          keep_web_open=True,
                          )

        define_proto(session=session)

        session.fuzz()

        # ref 3.3 渲染图
        # with open(f'fuzzing_topo_{int(time.time())}.png', 'wb') as file:
        with open(f'fuzzing_topo.png', 'wb') as file:
            file.write(session.render_graph_graphviz().create_png())
    except RuntimeError:
        traceback.print_exc()


def handle_ret(target, fuzz_data_logger, session, *args, **kwargs):
    print('=====================================================')
    try:
        if target.recv(1024):
            fuzz_data_logger.log_check(session.last_send)
    except:
        fuzz_data_logger.log_fail("Unable to connect ...")
        return

    print('=====================================================')


def define_proto(session):
    # disable Black formatting to keep custom indentation
    # fmt: off
    user = Request("user", children=(
        String(name="key", default_value="A" * 99),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="anonymous"),
        Static(name="end", default_value="\r\n"),
    ))

    passw = Request("pass", children=(
        String(name="key", default_value="PASS"),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="james"),
        Static(name="end", default_value="\r\n"),
    ))

    stor = Request("stor", children=(
        String(name="key", default_value="STOR"),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="AAAA"),
        Static(name="end", default_value="\r\n"),
    ))

    retr = Request("retr", children=(
        String(name="key", default_value="RETR"),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="AAAA"),
        Static(name="end", default_value="\r\n"),
    ))
    # fmt: on

    session.connect(user)
    session.connect(user, passw)
    session.connect(passw, stor)
    session.connect(passw, retr)


def define_proto_static(session):
    """Same protocol, using the static definition style."""
    s_initialize("user")
    s_string("USER")
    s_delim(" ")
    s_string("anonymous")
    s_static("\r\n")

    s_initialize("pass")
    s_string("PASS")
    s_delim(" ")
    s_string("james")
    s_static("\r\n")

    s_initialize("stor")
    s_string("STOR")
    s_delim(" ")
    s_string("AAAA")
    s_static("\r\n")

    s_initialize("retr")
    s_string("RETR")
    s_delim(" ")
    s_string("AAAA")
    s_static("\r\n")

    session.connect(s_get("user"))
    session.connect(s_get("user"), s_get("pass"))
    session.connect(s_get("pass"), s_get("stor"))
    session.connect(s_get("pass"), s_get("retr"))


# if __name__ == "__main__":
#     main()

if __name__ == '__main__':
    if len(sys.argv) == 3:
        ip = sys.argv[1]
        port = sys.argv[2]

        main(ip, int(port))
    else:
        print("usage: %s --help" % sys.argv[0])
        sys.exit(-1)
