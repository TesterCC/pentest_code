import sqlite3
import sys

if sys.version_info.major > 2:
    buffer = memoryview

class FuzzLoggerDbReader:
    """Read fuzz data saved using FuzzLoggerDb

    Args:
        db_filename (str): Name of database file to read.
    """

    def __init__(self, db_filename):
        self._database_connection = sqlite3.connect(db_filename, check_same_thread=False)
        self._db_cursor = self._database_connection.cursor()

    def get_test_case_data(self, index):
        c = self._db_cursor
        try:
            test_case_row = next(c.execute("""SELECT * FROM cases WHERE number=?""", [index]))
        except StopIteration:
            raise "No such testcase"

        rows = c.execute("""SELECT * FROM steps WHERE test_case_index=?""", [index])
        steps = []
        for row in rows:
            data = row[3]
            # Little hack since BLOB becomes type buffer in py2 and bytes in py3
            # At the end, data will be equivalent types: bytes in py3 and str in py2
            try:
                if isinstance(data, buffer):
                    data = str(data)
            except NameError as e:
                if "buffer" in str(e):  # buffer type does not exist in py3
                    pass
                else:
                    raise
            steps.append(
                data_test_step.DataTestStep(
                    type=row[1], description=row[2], data=data, timestamp=row[4], truncated=row[5]
                )
            )
        return data_test_case.DataTestCase(
            name=test_case_row[0], index=test_case_row[1], timestamp=test_case_row[2], steps=steps
        )

    def query(self, query, params=None):
        if params is None:
            params = []
        c = self._db_cursor
        return c.execute(query, params)
