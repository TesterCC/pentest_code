# -*- coding=utf-8 -*-
import json

from boofuzz import *
import ssl
import sys
import requests
import time
import urllib.parse

from requests.packages.urllib3.exceptions import InsecureRequestWarning, InsecurePlatformWarning
import warnings

# 过滤掉InsecureRequestWarning警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)

# 20240312 send packet ok, need optimization

warnings.filterwarnings("ignore", category=UserWarning)


def main():
    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    # Initialize a session with some target host and port
    # todo write a simple tcp receiver to test
    session = Session(
        target=Target(
            connection=SSLSocketConnection(host="172.16.16.16", port=4444, sslcontext=ctx, recv_timeout=10)),
        restart_threshold=1,
    )
    session.num_mutations(2)  # limit mutation count

    # 定义一个数据块
    s_initialize("ExampleBlock")

    # s_block_start 和 s_block_end 定义一个新的数据块
    s_block_start("block1")

    # 对静态二进制字符串进行模糊测试
    s_binary("00ff")

    # 对一个默认值为 0x1234，长度为16位的比特字段进行模糊测试
    s_bit_field(value=0x1234, width=16)

    # 对单个字节进行模糊测试
    s_byte(0xff)

    # 对多个字节进行模糊测试
    s_bytes("\x00\x11\x22\x33", fuzzable=True)

    # 计算并测试 block1 上的校验和
    s_checksum("block1", algorithm='crc32')

    # 对分隔符如冒号进行模糊测试
    s_delim(":", fuzzable=True)

    # 对双字（4字节）进行模糊测试
    s_dword(0x11223344)

    # 对文件输入进行模糊测试
    s_from_file("example.txt")

    # 检索命名的请求或数据块
    s_get("ExampleBlock")

    # 对元素组进行模糊测试
    s_group("group1", values=["val1", "val2", "val3"])

    # 初始化变量
    s_initialize(name="ExampleBlock")

    # 包括乐高模块（对于协议有用）
    # s_lego("lego_name")

    # 获取当前请求/块的变异总数
    num_mutations = s_num_mutations()

    # 对四字（8字节）进行模糊测试
    s_qword(0x1122334455667788)

    # 对给定字符集的随机长度字符串进行模糊测试
    s_random("ABCDE", min_length=0, max_length=10)

    # 重复一个可模糊的原始值
    s_repeat("block1", min_reps=0, max_reps=5, step=1)

    # 包括块的大小
    s_size("block1", length=4)

    # 包括一个静态的不可模糊值
    s_static("static_string")

    # 对字符串进行模糊测试
    s_string("fuzzme", fuzzable=True)

    # 根据先前原始值的值进行条件模糊测试
    s_switch("group1")

    # 更新当前的请求/块以进行手动修改
    s_update("ExampleBlock")

    # 对字（2字节）进行模糊测试
    s_word(0x1234)

    s_block_end()

    # 将块添加到会话中
    session.connect(s_get("ExampleBlock"))

    # 开始模糊测试
    session.fuzz()


if __name__ == "__main__":
    main()
