from boofuzz import *

# 在多个 session.connect 之间传递回调函数返回的值，你可以使用 Python 的全局变量或在回调函数中使用闭包。下面是使用闭包的示例：

def recv_banner():
    # 在闭包中定义一个变量来存储返回的值
    banner = ""

    def inner_callback(target, fuzz_data_logger, session, node):
        nonlocal banner
        response = node.recv(1024)
        banner = response
        return response

    return inner_callback

def define_proto_static(session):
    """Same protocol, using the static definition style."""
    s_initialize("user_testcase")
    s_string("USER")
    s_delim(" ")
    s_string("anonymous")
    s_static("\r\n")

    s_initialize("pass_testcase")
    s_string("PASS")
    s_delim(" ")
    s_string("XXXXX")
    s_static("\r\n")

# 创建第一个会话（session1）
session1 = Session(target=Target(connection=SocketConnection("192.168.0.1", 21)))
define_proto_static(session1)
session1.connect(s_get("user_testcase"), callback=recv_banner())

# 创建第二个会话（session2）
session2 = Session(target=Target(connection=SocketConnection("192.168.0.1", 21)))
define_proto_static(session2)
session2.connect(s_get("pass_testcase"), callback=recv_banner())

# 在 session2 中访问 session1 中的返回值
def print_banner(session, node):
    # 从闭包中获取返回的值
    nonlocal banner
    print(f"Received banner: {banner}")

# 在 session2 中的连接之后执行 print_banner 回调函数
session2.post_send_callbacks.append(print_banner)

# 启动模糊测试
session1.fuzz()