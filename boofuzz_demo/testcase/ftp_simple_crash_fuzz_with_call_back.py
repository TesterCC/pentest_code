#!/usr/bin/env python3
"""Demo FTP fuzzer as a standalone script."""
import re
import sys
import traceback

from boofuzz import *


# can crashed winxp_sp3 freefloatftp server 1.0 crash

def main(ip, port):
    """
    This example is a very simple FTP fuzzer. It uses no process monitory
    (procmon) and assumes that the FTP server is already running.
    """

    try:
        # ref: https://blog.csdn.net/weixin_46222091/article/details/119334375   4.1
        session = Session(target=Target(connection=TCPSocketConnection(ip, port)),
                          sleep_time=0.2,
                          restart_sleep_time=1,  # sleep for wait after crash, just 1
                          # post_test_case_callbacks=[handle_ret],
                          restart_threshold=1,
                          web_port=26666,   # default 26000
                          web_address='0.0.0.0',
                          keep_web_open=True,
                          )
        session.num_mutations(3)

        # define_proto(session=session)
        define_proto_static(session=session)

        session.fuzz()

    except RuntimeError:
        traceback.print_exc()


def define_proto(session):
    # disable Black formatting to keep custom indentation
    # fmt: off
    user = Request("user", children=(
        String(name="key", default_value="A" * 99),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="anonymous"),
        Static(name="end", default_value="\r\n"),
    ))

    passw = Request("pass", children=(
        String(name="key", default_value="PASS"),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="james"),
        Static(name="end", default_value="\r\n"),
    ))

    stor = Request("stor", children=(
        String(name="key", default_value="STOR"),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="AAAA"),
        Static(name="end", default_value="\r\n"),
    ))

    retr = Request("retr", children=(
        String(name="key", default_value="RETR"),
        Delim(name="space", default_value=" "),
        String(name="val", default_value="AAAA"),
        Static(name="end", default_value="\r\n"),
    ))
    # fmt: on

    session.connect(user)
    session.connect(user, passw)
    # session.connect(passw, stor)
    # session.connect(passw, retr)


def define_proto_static(session):
    """Same protocol, using the static definition style."""
    s_initialize("user_testcase")
    s_string("USER")
    s_delim(" ")
    s_string("anonymous")
    s_static("\r\n")

    s_initialize("pass_testcase")
    s_string("PASS")
    s_delim(" ")
    s_string("XXXXX")
    s_static("\r\n")

    # s_initialize("stor")
    # s_string("STOR")
    # s_delim(" ")
    # s_string("AAAA")
    # s_static("\r\n")
    #
    # s_initialize("retr")
    # s_string("RETR")
    # s_delim(" ")
    # s_string("AAAA")
    # s_static("\r\n")

    session.connect(s_get("user_testcase"), callback=recv_banner)
    session.connect(s_get("user_testcase"), s_get("pass_testcase"))
    # session.connect(s_get("pass"), s_get("stor"))
    # session.connect(s_get("pass"), s_get("retr"))

    # pseudo-code code
    # session.post_send = ftp_check  # ???

# def ftp_check(target, fuzz_data_logger, session, sock, *args, **kwargs):
#     target.close()
#     target.open()
#     recv_banner(target=target, fuzz_data_logger=fuzz_data_logger, session=session)
#     target.send('USER {0} \r\n'.format('admin'))
#     reply = target.recv(10000)
#     fuzz_data_logger.log_check('Checking reply matches regex /{0}/'.format(ftp_reply_regex.pattern))
#     if re.search(ftp_reply_regex, reply):
#         fuzz_data_logger.log_pass("Match")
#     else:
#         fuzz_data_logger.log_fail("No match")


ftp_reply_regex = b"220 FreeFloat Ftp Server"
def recv_banner(target, fuzz_data_logger, session, *args, **kwargs):
    banner = target.recv(10000)
    print(type(banner))
    print(f"[D] >>>> banner: {banner}")

    fuzz_data_logger.log_check('Checking reply matches regex /{0}/'.format(ftp_reply_regex))
    if re.search(ftp_reply_regex, banner):
        fuzz_data_logger.log_pass("Match")
    else:
        fuzz_data_logger.log_fail("No match, exiting...")
        exit(1)


# if __name__ == "__main__":
#     main()

if __name__ == '__main__':
    if len(sys.argv) == 3:
        ip = sys.argv[1]
        port = sys.argv[2]

        main(ip, int(port))
    else:
        # print("usage: %s --help" % sys.argv[0])
        print("usage: %s ip port" % sys.argv[0])
        sys.exit(-1)
