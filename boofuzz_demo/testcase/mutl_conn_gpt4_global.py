from boofuzz import *

# 定义一个全局字典来保存会话数据
session_data = {}

def recv_banner(target, fuzz_data_logger, session, *args, **kwargs):
    # 这里假设你可以从target的响应中获取你想要的数据
    banner_data = target.recv(1024)
    fuzz_data_logger.log_check("Received banner: {}".format(banner_data))

    # 存储需要的信息到session_data字典
    session_data['banner'] = banner_data

def use_banner_data(target, fuzz_data_logger, session, *args, **kwargs):
    # 在这个回调中你可以使用之前接收的banner数据
    # 这里只是一个打印语句作为示例
    banner = session_data.get('banner', None)
    if banner:
        fuzz_data_logger.log_info("Using banner data: {}".format(banner))
    # ...在这里可以根据banner数据来修改目标请求

def main():
    session = Session()

    # 第一次连接时接收banner
    session.connect(SimpleRequest("HTTP Request"), callback=recv_banner)

    # 后续的连接时使用之前接收的banner
    session.connect(SimpleRequest("HTTP Request"), callback=use_banner_data)
    # ... 这里可以有更多的session.connect调用，每个都使用use_banner_data作为callback

    session.fuzz()

if __name__ == "__main__":
    main()