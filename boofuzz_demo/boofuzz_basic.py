from boofuzz import *
import ssl
import sys

import argparse
import textwrap


# request https


def simple(target, fuzz_data_logger, session, *args, **kwargs):
    print('=====================================================')
    try:
        if 'redirectionURL' in target.recv(10240).decode():
            fuzz_data_logger.log_check(session.last_send)
    except:
        fuzz_data_logger.log_fail("Unable to connect ...")
        return

    print('=====================================================')



ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

session = Session(target=Target(
    connection=SSLSocketConnection(host=sys.argv[1], port=int(sys.argv[2]), sslcontext=ctx)),
    restart_threshold=1,
    sleep_time=0.1,
    post_test_case_callbacks=[simple],
    receive_data_after_fuzz=True
)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='BHP Net Tool',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''Example:
          netcat.py -t 192.168.1.108 -p 5555 -l -c # command shell
          netcat.py -t 192.168.1.108 -p 5555 -l -u=mytest.whatisup # upload to file
          netcat.py -t 192.168.1.108 -p 5555 -l -e=\"cat /etc/passwd\" # execute command
          echo 'ABCDEFGHI' | ./netcat.py -t 192.168.1.108 -p 135 # echo local text to server port 135
          netcat.py -t 192.168.1.108 -p 5555 # connect to server
          '''))
    # create standard terminal cmd ui
    parser.add_argument('-c', '--command', action='store_true', help='initialize command shell')
    parser.add_argument('-e', '--execute', help='execute specified command')
    parser.add_argument('-l', '--listen', action='store_true', help='listen')
    parser.add_argument('-p', '--port', type=int, default=5555, help='specified port')
    parser.add_argument('-t', '--ip', default='192.16', help='specified IP')
    parser.add_argument('-u', '--upload', help='upload file')
    args = parser.parse_args()
    if args.listen:
        # 如果要监听，就在缓冲区里填上空白数据，把空白缓冲区传给NetCat对象
        buffer = ''
