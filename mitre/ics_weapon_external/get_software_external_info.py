# -*- coding: utf-8 -*-
# @Time    : 2022/5/16
# @Author  : SecCodeCat


import csv
import json
from stix2 import MemoryStore, Filter
from stix2 import CompositeDataSource
from itertools import chain


import pandas as pd

"""
主要用于两个数据库做对比

ref: 
https://oasis-open.github.io/cti-documentation/stix/intro
https://docs.oasis-open.org/cti/stix/v2.1/cs01/stix-v2.1-cs01.html
https://zhuanlan.zhihu.com/p/311145611

pip install stix2 pandas -i https://pypi.tuna.tsinghua.edu.cn/simple
"""

# git clone cti
# https://github.com/mitre/cti
CTI_PATH = r"D:\git_workspace\ws_secdev\cti"
# https://github.com/mitre-attack/attack-stix-data/
ASD_PATH = r"D:\git_workspace\ws_secdev\attack-stix-data"
CTI_ICS_PATH = CTI_PATH + "/ics-attack/ics-attack.json"
ASD_ICS_PATH = ASD_PATH + "/ics-attack/ics-attack.json"

# ENTERPRISE_PATH = CTI_PATH + "/enterprise-attack/enterprise-attack.json"
# MOBILE_PATH = CTI_PATH + "/mobile-attack/mobile-attack.json"


# 增加健壮性
with open(CTI_ICS_PATH, encoding="utf-8") as f:
    cti_ics = json.load(f)

with open(ASD_ICS_PATH, encoding="utf-8") as f:
    asd_ics = json.load(f)

# with open(ENTERPRISE_PATH, encoding="utf-8") as f:
#     enterprise = json.load(f)
#
# with open(MOBILE_PATH, encoding="utf-8") as f:
#     mobile = json.load(f)

# ms = MemoryStore(stix_data=stix_data["objects"])
# mal = ms.query([Filter("type", "=", "malware")])

# 根据技术名称获取信息
def get_technique_by_name(stix_data, name):
    ms = MemoryStore(stix_data=stix_data["objects"])

    filter = [
        Filter('type', '=', 'attack-pattern'),
        Filter('name', '=', name)
    ]
    ret = ms.query(filter)
    print(ret)
    return ret


# 获取数据集节点类型
def get_objects_types(stix_data, stix_data_name="stix_data"):
    type_key = []
    for i in stix_data["objects"]:
        if i.get("type") not in type_key:
            type_key.append(i.get("type"))
    print(f"{stix_data_name} object has types: {len(type_key)},\ntype key: {type_key}")


def get_info_by_att_id(stix_data, id):
    '''根据ATT&CK id获取数据
    :param stix_data:
    :param id:
    :return:
    '''
    ms = MemoryStore(stix_data=stix_data["objects"])
    ret = ms.query([Filter("external_references.external_id", "=", id)])
    print(ret) # debug
    return ret


def get_software(stix_data):
    '''获取指定领域数据集中的软件
    :param stix_data:
    :return:
    '''
    ms = MemoryStore(stix_data=stix_data["objects"])
    ret = list(chain.from_iterable(
        ms.query(f) for f in [
            Filter("type", "=", "tool"),
            Filter("type", "=", "malware")
        ]
    ))
    # print(ret) # debug
    return ret


if __name__ == '__main__':
    # get_objects_types(ics,"ICS")
    # get_objects_types(enterprise,"Enterprise")
    # get_objects_types(mobile, "Mobile")

    # get the technique titled "System Information Discovery"
    # get_technique_by_name(enterprise, 'System Information Discovery')

    # get info by id
    # get_info_by_att_id(ics,"S0143")
    # get_info_by_att_id(enterprise,"S0143")

    # # export excel
    # COLUMNS = ["type","name","x_mitre_domains", "x_mitre_aliases", "id", "external_references","description",]
    #
    # df_software = pd.DataFrame(ret)
    # df_sw = df_software[COLUMNS]
    # df_sw.to_excel("test_malware_asd.xlsx")




    # ret_cti = [i['name'] for i in ret1]
    # ret_cti_set = set(ret_cti)
    # print(ret_cti_set)

    # ret2 = get_software(asd_ics)
    # print(len(ret2))

    # ret_asd = [i['name'] for i in ret2]
    # ret_asd_set = set(ret_asd)
    # print(ret_asd_set)

    # get domain software
    ret = get_software(cti_ics)
    # print(len(ret))

    external_rows = []
    for i in ret:
        # print(i['name'], " -----", i["external_references"])
        for j in i["external_references"]:
            # print(j.get('source_name'),j.get('url'),j.get('external_id'),j.get('description'))
            print(j.get('external_id',"-")," --- ", j.get('source_name','-')," --- ",j.get('url','-')," --- ", j.get('description','-'))
            external_rows.append((j.get('external_id',"-"), j.get('source_name','-'),j.get('url','-'), j.get('description','-')))

    print(len(external_rows))

    # write into csv

    headers = ['external_id','source_name','url','description']
    with open('weapon_external.csv', 'w', newline="", encoding="utf-8") as f:
        f_csv = csv.writer(f)
        f_csv.writerow(headers)
        f_csv.writerows(external_rows)

