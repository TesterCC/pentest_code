# -*- coding: utf-8 -*-
# @Time    : 2022/5/16
# @Author  : SecCodeCat


import csv
import json
import re
from stix2 import MemoryStore, Filter
from stix2 import CompositeDataSource
from itertools import chain


import pandas as pd

"""
主要用于两个数据库做对比

ref: 
https://oasis-open.github.io/cti-documentation/stix/intro
https://docs.oasis-open.org/cti/stix/v2.1/cs01/stix-v2.1-cs01.html
https://zhuanlan.zhihu.com/p/311145611
"""

# git clone cti
# https://github.com/mitre/cti
CTI_PATH = r"E:\workspace_pentest\cti"
# https://github.com/mitre-attack/attack-stix-data/
# ASD_PATH = r"E:\workspace_pentest\attack-stix-data"
ICS_PATH = CTI_PATH + "/ics-attack/ics-attack.json"
# ASD_ICS_PATH = ASD_PATH + "/ics-attack/ics-attack.json"

ENTERPRISE_PATH = CTI_PATH + "/enterprise-attack/enterprise-attack.json"
MOBILE_PATH = CTI_PATH + "/mobile-attack/mobile-attack.json"


# 增加健壮性
with open(ICS_PATH, encoding="utf-8") as f:
    cti_ics = json.load(f)

with open(ENTERPRISE_PATH, encoding="utf-8") as f:
    cti_enterprise = json.load(f)

with open(MOBILE_PATH, encoding="utf-8") as f:
    cti_mobile = json.load(f)

# ms = MemoryStore(stix_data=stix_data["objects"])
# mal = ms.query([Filter("type", "=", "malware")])

# 根据技术名称获取信息
def get_technique_by_name(stix_data, name):
    ms = MemoryStore(stix_data=stix_data["objects"])

    filter = [
        Filter('type', '=', 'attack-pattern'),
        Filter('name', '=', name)
    ]
    ret = ms.query(filter)
    print(ret)
    return ret


# 获取数据集节点类型
def get_objects_types(stix_data, stix_data_name="stix_data"):
    type_key = []
    for i in stix_data["objects"]:
        if i.get("type") not in type_key:
            type_key.append(i.get("type"))
    print(f"{stix_data_name} object has types: {len(type_key)},\ntype key: {type_key}")



def get_group(stix_data):
    '''获取指定组织信息
    :param stix_data:
    :return:
    '''
    ms = MemoryStore(stix_data=stix_data["objects"])
    filter = [
        Filter('type', '=', 'intrusion-set')
    ]
    ret = ms.query(filter)
    # print(ret) # debug
    return ret

def write_csv(csv_name,csv_row, csv_headers=None):
    # write into csv
    # csv_headers = ['name','desc','url']
    with open(csv_name, 'w', newline="", encoding="utf-8") as f:
        f_csv = csv.writer(f)
        if csv_headers:
            f_csv.writerow(csv_headers)
        f_csv.writerows(csv_row)

if __name__ == '__main__':


    # # write into csv
    # headers = ['name','desc','url']
    # with open('ics_weapon_description_url.csv', 'w', newline="", encoding="utf-8") as f:
    #     f_csv = csv.writer(f)
    #     f_csv.writerow(headers)
    #     f_csv.writerows(external_rows)

    # get domain group
    ics_group = get_group(cti_ics)

    # en_group = get_group(cti_enterprise)
    # mobile_group = get_group(cti_mobile)
    #
    # all = ics_group + en_group + mobile_group
    # print(f"ics: {len(ics_group)}\nenterprise:{len(en_group)}\nmobile:{len(mobile_group)}\ntotal:{len(all)}")
    #
    # print("==================")
    # ag = set([i.get('name') for i in all])
    # print(len(ag))    # 140不重复的

    # 先看ICS的group
    # print(len(ics_group))

    # ICS keywords
    # keyword_list = ["ICS","SIS","energy"]

    regex = r"http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"

    csv_row = []

    for group in ics_group:
        # print(group['name'],group['aliases'], group['description'])
        desc_link = re.findall(regex, group["description"])
        desc_link = [i.split(")")[0] for i in desc_link]

        csv_row.append((group['name'],group['aliases'], group['description'],desc_link))

    csv_headers = ['name', 'aliases','desc','desc_link']

    write_csv("ics_group_desc_link.csv", csv_row,csv_headers)