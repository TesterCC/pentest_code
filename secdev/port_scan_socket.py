# coding=utf-8
'''
DATE: 2020/09/08
AUTHOR: Yanxi Li
8-2 使用Python实现端口扫描  fooying
'''
import time

"""
扫描原理：
1.参数接收
    参数值为要扫描的目标机器IP和端口
2.发送和收取相应包
3.包内容判断

如果要构造TCP请求包
在Python里主要使用的模块为socket和scapy

method 1: socket有一个connect的方法，直接可以对目标IP和端口进行连接尝试并返回结果，无需自己去构建SYN包

python3 port_scan_socket.py 10.0.4.141 22  

挺实用的，单线程简单扫描
"""

import sys
import socket

socket.setdefaulttimeout(2)


def scan(ip, port):
    print("Server %s, Port: %s is scaning" % (ip, port),end="")
    try:
        port = int(port)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # socket.AF_INET 服务间通信      socket.SOCK_STREAM 流式socket，for TCP
        res = sock.connect_ex((ip, port))
        # print(res)
        if res == 0:
            print("Result: OPEN")
        else:
            # print("Result: CLOSE")
            print("")   # format
            pass
        sock.close()
        time.sleep(3)
    except socket.gaierror:
        print("Hostname could not be resolved. Exiting...")
    except socket.error:
        print("Can't connect to the server...")


if __name__ == '__main__':
    # ip = sys.argv[1]
    # port = sys.argv[2]
    # scan(ip, port)
    # ip_list = ["10.0.4.68", "10.0.4.69"]
    # port_list = [21, 22, 25, 53, 80, 1080, 3389, 5000, 5900, 5901, 6379, 8888]

    ip_list = ["172.16.12.10"]
    # port_list = [21, 22, 23, 25, 53, 67, 68, 69, 80, 110, 135, 139, 143, 161, 389, 443, 445, 512, 513, 514, 873, 1080,
    #              1352, 1433, 1521, 2049, 2181, 3306, 3389, 3690, 4848, 5000, 5432, 5632, 5900, 5901, 6379, 7001, 7002,
    #              8069, 8080, 9090, 9092, 9200, 9300, 10000, 11211, 27017, 27018, 50000]

    # port_list = [47808, 20000,34980,44818,55000,55001,55002,55003,1089,1090,1091,502,4840,34962,34963,34964,4000]   # IoC

    port_list = range(910,4000)

    start_time = time.time()
    for ip in ip_list:
        for port in port_list:
            scan(ip, port)
    end_time = time.time() - start_time

    print(f"run time: {end_time} seconds")
